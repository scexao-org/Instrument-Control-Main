#! /usr/bin/env python
#
# mkpass.py -- too to make a password file from a semester account file
#
#[ Eric Jeschke (eric@naoj.org) --
#  Last edit: Fri Jan  7 12:19:07 HST 2011
#]
#
import sys
import time
import crypt
import yaml

import Bunch
from cfg.INS import INSdata as INSconfig
import symenc

testdata = """#
o11011	S11A-EN11	ALL	eric@naoj.org	eric,starsopr	s11a	ocs	butter	butter
"""

class ObsInfo(object):

    def __init__(self, key, salt=None, iv=None):
        # For looking up instruments
        self.insconfig = INSconfig()
        
        self._eo = symenc.SymmetricEncryptionObject(key, salt=salt,
                                                    iv=iv)
        self.tbl = {}

    def clearTable(self):
        self.tbl = {}

    def getent(self, propid):
        """May raise KeyError."""
        return Bunch.Bunch(self.tbl[propid])

    def checkPass(self, propid, passwd):
        ent = self.getent(propid)
        c_pass = self._eo.mkhash(passwd)
        if c_pass == ent.c_opass:
            return True
        return False

    def loadFromTextFile(self, textfile):

        with open(textfile, 'r') as in_f:
            for line in in_f:
                line = line.strip()

                # skip comments and blank lines
                if line.startswith('#') or len(line) == 0:
                    continue

                tup = line.split()
                if len(tup) != 9:
                    print "Format error; number of fields != 9: '%s'" % (line)
                    continue

                inst = tup[2].upper()
                if inst == 'ALL':
                    #inst = ','.join(insconfig.getNames(active=True))
                    inst = '*'

                inslist = inst.split(',')
                insset = set(inslist)
                for ins in inslist:
                    # Grrr...hack to add AO instruments due to odd repn
                    # in instrument list
                    if '+AO' in ins:
                        nins, xx = ins.split('+')
                        insset.remove(ins)
                        insset.add(nins)
                        insset.add('AO188')
                        insset.add('WAVEPLAT')

                inst = ','.join(insset)

                propid = tup[0]

                d = {}
                d['proposal'] = tup[1]
                d['inst']     = inst
                d['semester'] = tup[5]
                d['uacct']    = tup[6]
                d['c_upass']  = self._eo.mkhash(tup[7])
                d['upass']  = self._eo.encrypt(tup[7])
                d['c_opass']  = self._eo.mkhash(tup[8])
                d['opass']  = self._eo.encrypt(tup[8])

                self.tbl[propid] = d

    def load(self, yamlfile):
        with open(yamlfile, 'r') as in_f:
            buf = in_f.read()
        d = yaml.load(buf)

        self.tbl.update(d)

    def getopass(self, propid):
        ent = self.getent(propid)
        return self._eo.decrypt(ent.opass)

    def getupass(self, propid):
        ent = self.getent(propid)
        return self._eo.decrypt(ent.upass)

    def save(self, outfile):
        ystr = yaml.dump(self.tbl)

        with open(outfile, 'w') as out_f:
            out_f.write('# autogenerated %s\n' % time.ctime())
            out_f.write(ystr)
            
    def writeStdout(self):
        ystr = yaml.dump(self.tbl)

        print '# autogenerated %s\n' % time.ctime()
        print ystr

            
def main(options, args):

    obj = ObsInfo(options.key, salt=options.salt, iv=options.iv)
    if options.twinfile:
        obj.loadFromTextFile(options.twinfile)
    elif options.yamlfile:
        obj.load(options.yamlfile)

    if options.outfile:
        obj.save(options.outfile)
    else:
        obj.writeStdout()


if __name__ == '__main__':
    # Parse command line options
    from optparse import OptionParser

    usage = "usage: %prog [options]"
    optprs = OptionParser(usage=usage, version=('%%prog'))
    
    optprs.add_option("--debug", dest="debug", default=False, action="store_true",
                      help="Enter the pdb debugger on main()")
    optprs.add_option("-i", "--in", dest="yamlfile", default=None,
                      metavar='FILE',
                      help="Read input from YAML FILE")
    optprs.add_option("--iv", dest="iv", default=None,
                      help="Specify initial IV for AES CBC decoding")
    optprs.add_option("--profile", dest="profile", action="store_true",
                      default=False,
                      help="Run the profiler on main()")
    optprs.add_option("-o", "--out", dest="outfile", default=None,
                      metavar='FILE',
                      help="Write output to FILE")
    optprs.add_option("-k", "--key", dest="key", default=None,
                      metavar='KEY',
                      help="Specify symmetric encryption key")
    optprs.add_option("-s", "--salt", dest="salt", default=None,
                      help="Specify salt for padding key")
    optprs.add_option("-t", "--twin", dest="twinfile", default=None,
                      metavar='FILE',
                      help="Read input from twin FILE")

    (options, args) = optprs.parse_args(sys.argv[1:])

    if len(args) != 0:
        optprs.error("incorrect number of arguments")

    if (not options.twinfile) and (not options.yamlfile):
        optprs.error("Please specify an input file with --in or --twin")

    # Are we debugging this?
    if options.debug:
        import pdb

        pdb.run('main(options, args)')

    # Are we profiling this?
    elif options.profile:
        import profile

        print "%s profile:" % sys.argv[0]
        profile.run('main(options, args)')

    else:
        main(options, args)
       
    
# END
