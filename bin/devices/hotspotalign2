#!/usr/bin/env python

# ======================================================== #
#  _   _       _      ___             _                    #
# | | | | ___ | |_   / __\ ____  ___ | |_                  #
# | --- |/ _ \| __|  \_\_ |  _ \/ _ \| __|                 #
# | --- | (_) | |_   __\ \| (_) |(_) | |_                  #
# |_| |_|\___/\___|  \___/|  __/\___/\___|                 #
#                         |_|                              #
#    _   _ _                                               #
#   /_\ | (_) __ _ _ __                                    #
#  //_\\| | |/ _` | '_ \                                   #
# /  _  \ | | (_| | | | |                                  #
# \_/ \_/_|_|\__, |_| |_|                                  #
#            |___/                                         #
#                                                          #
# ======================================================== #

import os
import time
import sys
import pdb
import numpy as np
import pyfits as pf
import numpy.linalg as la

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
from camera_tools import cam_cmd
from scexao_shm import shm
import ezstep_chain

ttmdev  = "/dev/serial/by-path/"
ttmdev += "pci-0000:00:1d.0-usb-0:1.2.4.4.4.4:1.0-port0" # all steppers now connected together

shm_im = shm("/tmp/ircam2.im.shm")

# Reading in shared memory
#------------------------

def read_shm():
    im_chuck = shm_im.get_data()
    return im_chuck

# Find center of image
#------------------------

def find_center(bias, shiftx, shifty):
    for i in range(100):
        if i == 0:
            im_chuck = read_shm()/100.
        else:
            im_chuck += read_shm()/100.
    im_chuck = im_chuck-bias
    imin = np.percentile(im_chuck, 99.6)
    im_chuck = im_chuck-imin
    mask = im_chuck > 0
    imax = np.percentile(bias, 99.95)
    hotpix = bias-imax < 0
    im_chuck = im_chuck*mask*hotpix
    iflux = np.percentile(im_chuck, 99.97)
    if iflux < 50:
        print "Not enough flux, aborting"
        os.system("/home/scexao/bin/log Hotspotalign: Not enough flux, aborting")
        sys.exit()
    #pf.writeto("./temp_chuck.fits",im_chuck,clobber='True')
    total = np.sum(im_chuck)
    X, Y = np.indices(np.shape(im_chuck)) 
    cx = (np.sum(Y*im_chuck)/total)
    cy = (np.sum(X*im_chuck)/total)
    cx = cx-shiftx
    cy = cy-shifty
    return [cx, cy]

# Main
#------------------------

# parameters of the target point
with open('/home/scexao/conf/chuckcam2_aux/hotspots.txt') as file:
    pos = np.array([[float(digit) for digit in line.split()] for line in file])

shiftx = 160+pos[0,0]-0.5
shifty = 128+pos[0,1]-0.5

# parameters of the loop
gain = -0.3
precision = 0.2

A = np.matrix([[3.35/100., 0.0/100.],[0.0/100., -3.6/100.]])
invA = la.inv(A)


camid = 2 # camera identifier (1: Chuckcam)

# read the exposure time
et = cam_cmd("tint? %d" % (camid), True).strip('\x00')
if et.isdigit():
    etime = int(et)
    print etime
else:
    print "Couldn't read the exposure time, trying again"
    time.sleep(2)
    et = (cam_cmd("tint? %d" % (camid), True).strip('\x00'))
    if et.isdigit():
        etime = int(et)
        print etime
    else:
        print "Couldn't read the exposure time again, aborting"
        os.system("/home/scexao/bin/log Hotspotalign: cannot read exposure time, aborting")
        sys.exit()
    

# read the dark for this exposure time
bname = home+"/conf/chuckcam2_aux/bias%07d.fits" % (etime,)
bias = pf.getdata(bname)

# Try to find the center a first time, to check the flux
c0 = find_center(bias, shiftx, shifty)
# move a first time in negative values in x and y
ttm = ezstep_chain.ezstep_chain(ttmdev)
ttm.dmove(1, -100)
time.sleep(0.1)
ttm.dmove(2, -100)
time.sleep(0.1)

#initialize the position
cnt = 0
c0 = find_center(bias, shiftx, shifty)
print c0

os.system("/home/scexao/bin/log Hotspotalign: starting alignment")

# loop
while (((c0[0]**2+c0[1]**2)**0.5) > precision) and (cnt < 500):
    cnt = cnt+1
    c0 = find_center(bias, shiftx, shifty)
    print c0
    print precision
    
    # if the psf is still north-west of the hotspot, move south-east
    if (c0[0] > precision) and (c0[1] < -precision):
        ttm.dmove(1, -100)
        time.sleep(0.1)
        ttm.dmove(2, -100)
        if cnt > 20:
            precision = precision+0.05
    
    # if the psf is still south-west of the hotspot, move east
    elif (c0[0] > precision) and (c0[1] > -precision):
        ttm.dmove(2, -100)
        if cnt > 20:
            precision = precision+0.05
    
    # if the psf is still north-east of the hotspot, move south
    elif (c0[0] < precision) and (c0[1] < -precision):
        ttm.dmove(1, -100)
        if cnt > 20:
            precision = precision+0.05

    # else, if the psf is south-east of the hotspot, move closer to the hotspot
    else:
        com = np.dot(invA, c0)
        print com
        com0x = int(round(com[0,0]*gain))
        com0y = int(round(com[0,1]*gain))
        print com0x, com0y
        com0x = min([com0x, 100])
        com0y = min([com0y, 100])
        if (com0x > 0):
            ttm.dmove(2, com0x)
            time.sleep(0.1)
        if (com0y > 0):
            ttm.dmove(1, com0y)
            time.sleep(0.1)

# close the communication with the tip-tilt mount
ttm.close()

os.system("/home/scexao/bin/log Hotspotalign: alignment done")
