#!/usr/bin/env python3

# ======================================================== #
#    ___       __    __  ___  __      __ _ _ _             #
#   / _ \_   _/ / /\ \ \/ __\/ _\    / _(_) | |_ ___ _ __  #
#  / /_)/ | | \ \/  \/ / _\  \ \    | |_| | | __/ _ \ '__| #
# / ___/| |_| |\  /\  / /    _\ \   |  _| | | ||  __/ |    #
# \/     \__, | \/  \/\/     \__/   |_| |_|_|\__\___|_|    #
#        |___/                                             #
#           _               _                              #
# __      _| |__   ___  ___| |                             #
# \ \ /\ / / '_ \ / _ \/ _ \ |                             #
#  \ V  V /| | | |  __/  __/ |                             #
#   \_/\_/ |_| |_|\___|\___|_|                             #
#                                                          #
# ======================================================== #

import serial
import os
import time
import binascii
import sys
import pdb
import subprocess



home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import logit

import zaber_chain
zabdev  = "/dev/serial/by-id/"
zabdev += "usb-FTDI_USB_Serial_Converter_FTG4YOPA-if00-port0"

import wheel
whldev = "/dev/serial/by-id/"
whldev += "usb-FTDI_FT232R_USB_UART_A600crlf-if00-port0"

def usage():
    print """---------------------------------------
Usage: pywfs <dev> <command> <arg1> <arg2>
---------------------------------------
dev:\n---
    wheel      rotate focal plane wheel
    reimage    move reimaging lens
    fcs_lens   move focusing lens
    col_lens   move collimator lens \n
command:\n-------  
wheel:
    status     displays camera status
actators:
    x          horizontal axis
    y          vertical axis \n
arg1:\n-----    
wheel:
    1 - 6 (wheel slot position)

actuators:
    home       sends the camera home
    goto       moves camera to position:
               numerical value 
    status     displays camera status

arg2:\n----
    numerical value (zaber steps)
   
examples:\n--------
    pywfs reimage y status
    pywfs fcs_lens focus status
    pywfs col_lens focus status
    pywfs wheel 5 (change wheel slot)

contents:\n--------
    1 Open (default)
    2 700 nm, BP 50 nm 
    3 Block
    4 750 nm, BP 50 nm
    5 850 nm, BP 25 nm  
    6 850 nm, BP 40 nm
--------------------------------------- """
    sys.exit()


# =====================================================================
# =====================================================================
def main():
    args = sys.argv[1:]  # list of read arguments
    na = args.__len__()  # number of arguments

    if args == []: usage()

    if "wheel" in args[0].lower():
        if (na > 1) and (("?" in args[1].lower()) or \
                             ("st" in args[1].lower())):
            whl = wheel.wheel(whldev)
            print("Last stored position = %c" %(whl.saved(),))
            subprocess.call(["scexaostatus","set", "pywfsfwpos", str(whl.saved())])
            whl.close()
            sys.exit()
        elif (na > 1) and args[1].isdigit():
            if (1 <= int(args[1]) <= 6):
                whl = wheel.wheel(whldev)
                whl.goto(args[1])
                whl.close()
                subprocess.call(["scexaostatus","set", "pywfsfwpos", str(args[1])])
                logit.logit('PyWFS_filters','moved_to_slot_'+str(args[1]))
            else:
                print("Wheel only has 6 positions")
            sys.exit()
        else:
            usage()
    elif "all" in args[0].lower():
        print "not yet"
        sys.exit()

    # what dof are we actuating?
    idn = 0
    
   
        
    if "reimage" in args[0].lower():
        if "x" in args[1].lower():    #nominal position is 170000
            idn = 2
        elif "y" in args[1].lower():   #nominal position is 80000
            idn = 4
        else:
            usage()

        if na < 3: # safety
            usage()

        if "home" in args[2].lower():
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.home(idn)
            zab.close()
            logit.logit('PyWFS_Reimage_lenses_'+str(args[1]),'moved_to_position_0')
        elif ("stat" in args[2].lower()) or ("?" in args[2].lower()):
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            position = zab.status(idn, quiet=True)
            zab.close()
            print("Axis %s (idn=%d): pos = %d" % (args[0], idn, position))

        elif "goto" in args[2].lower():
            if na < 4: # safety
                usage()

            try:
                pos = int(args[3])
            except:
                usage()
            
            relative=False
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.move(idn, pos, relative=relative)
            zab.close()
            logit.logit('PyWFS_Reimage_lenses_'+str(args[1]),'moved_to_position'+str(args[3]))

        else:
            usage()
            
    if "fcs_lens" in args[0].lower():   #nominal position 80000
        idn = 7
        if na < 2: # safety
            usage()

        if "home" in args[1].lower():
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.home(idn)
            zab.close()
            logit.logit('PyWFS_fcs_lens','moved_to_position_0')

        elif ("stat" in args[1].lower()) or ("?" in args[1].lower()):
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            position = zab.status(idn, quiet=True)
            zab.close()
            print("Axis %s (idn=%d): pos = %d" % (args[0], idn, position))

        elif "goto" in args[1].lower():
            if na < 3: # safety
                usage()

            try:
                pos = int(args[2])
            except:
                usage()
            if pos <= 130000:
                relative=False
                zab = zaber_chain.zaber_chain(zabdev, quiet=True)
                zab.move(idn, pos, relative=relative)
                zab.close()
                logit.logit('PyWFS_fcs_lens','moved_to_position_'+str(args[2]))
            else:
                usage()

        else:
            usage()

    if "col_lens" in args[0].lower():  #nominal position is 140 000   
        idn = 1
        if na < 2: # safety
            usage()

        if "home" in args[1].lower():
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.home(idn)
            zab.close()
            logit.logit('PyWFS_col_lens','moved_to_position_0')

        elif ("stat" in args[1].lower()) or ("?" in args[1].lower()):
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            position = zab.status(idn, quiet=True)
            zab.close()
            print("Axis %s (idn=%d): pos = %d" % (args[0], idn, position))

        elif "goto" in args[1].lower():
            if na < 3: # safety
                usage()

            try:
                pos = int(args[2])
            except:
                usage()
            relative=False
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.move(idn, pos, relative=relative)
            zab.close()
            logit.logit('PyWFS_col_lens','moved_to_position_'+str(args[3]))

        else:
            usage()

if __name__ == "__main__":
    main()






#---------OLD CODE-----------
'''
 if "cam" in args[0].lower():
        if "x" in args[1].lower():
            idn = 2
        elif "y" in args[1].lower():
            idn = 1
        elif "focus" in args[1].lower():
            idn = 3
        else:
            usage()

        if na < 3: # safety
            usage()

        if "home" in args[2].lower():
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.home(idn)
            zab.close()
            logit.logit('PyWFS_Camera_'+str(args[1]),'moved_to_position_0')
        elif "stat" in args[2].lower():
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            position = zab.status(idn, quiet=True)
            zab.close()
            print("Axis %s (idn=%d): pos = %d" % (args[0], idn, position))

        elif "goto" in args[2].lower():
            if na < 4: # safety
                usage()

            try:
                pos = int(args[3])
            except:
                usage()

            relative = False
            if ('+' in args[3]) or ('-' in args[3]):
                #relative = True
                print("Relative move not implemented yet!")
                sys.exit()

            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.move(idn, pos, relative=relative)
            zab.close()
            logit.logit('PyWFS_Camera_'+str(args[1]),'moved_to_position'+str(args[3]))

        else:
            usage()

'''
