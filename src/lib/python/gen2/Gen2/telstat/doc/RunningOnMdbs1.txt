RunningOnMdbs1.txt -- Bruce Bon -- 2005-10-26

Cribsheet on running TelStat on mdbs1, using either FAI simulator data or 
real summit data

_______________________________________________________

Running an existing version of TelStat on mdbs1, displaying to a remote host:

1. Log onto mdbs1 using "ssh -Y", any account (e.g. bon)

2. From the login window:

        > echo $DISPLAY
        localhost:13.0
        > cp .Xauthority foo
        > chmod go+r foo

3. From the login window:

        > su - o00096

   and provide the password.

   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
   IMPORTANT NOTE: you cannot change shells (e.g. to tcsh or bash) or Python 
   will fail with something like the following traceback:

   Traceback (most recent call last):
     File "OSSO_TelStat", line 303, in ?
       root = Tkinter.Tk()
     File "/opt/share/ssd/lib/python2.3/lib-tk/Tkinter.py", line 1564, in __init__
       self.tk = _tkinter.create(screenName, baseName, className)
   _tkinter.TclError: invalid command name "tcl_findLibrary"

   It hangs at this point and you have to kill the python process from another
   window -- control/C doesn't work.
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

4. Set the o00096 DISPLAY variable to the value from step 2, and 
   merge foo into .Xauthority:

        > setenv DISPLAY localhost:13.0
        > xauth merge /home/bon/foo

5. Change to the TelStat directory, e.g.:

        > cd /home/bon/OSSO_TelStat.1_0_13.rc1

6. Set up Python environment:

        > setenv PYTHONPATH OSSO_TelStatLib
        > setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/opt/share/ssd/lib
        > setenv PATH .:${PATH}:/opt/share/ssd/bin

7. By default, OSS_OBS_HOST will be set to mobs1 for FAI simulator data.
   If this is what you want, just run TelStat, e.g.:

        > OSSO_TelStat

            OR

        > OSSO_TelStat -l -d        # data logging, debug mode

8. If you want summit data:

        > setenv OSS_OBS_HOST obs1
        > OSSO_TelStat

            OR

        > OSSO_TelStat -l -d        # data logging, debug mode

NOTE:  Log files generated by TelStat will now go into the
        /app/OSS/LOCAL/OSS_PRGLOG directory, which is local to
        each workstation.

_______________________________________________________

Running an existing version of TelStat on mdbs1, displaying to mdbs1:

1. Log onto mdbs1 using any account (e.g. bon)

2. In any shell window (I know this is odd, but it's necessary):

        > xhost +mdbs1

3. In any shell window:

        > su -l o00096

   and provide the password.

   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
   IMPORTANT NOTE: you cannot change shells (e.g. to tcsh or bash) or Python 
   will fail with something like the following traceback:

   Traceback (most recent call last):
     File "OSSO_TelStat", line 303, in ?
       root = Tkinter.Tk()
     File "/opt/share/ssd/lib/python2.3/lib-tk/Tkinter.py", line 1564, in __init__
       self.tk = _tkinter.create(screenName, baseName, className)
   _tkinter.TclError: invalid command name "tcl_findLibrary"

   It hangs at this point and you have to kill the python process from another
   window -- control/C doesn't work.
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

4. Set the o00096 DISPLAY variable to mdbs1:0.0:

        > setenv DISPLAY mdbs1:0.0

5. Change to the TelStat directory, e.g.:

        > cd /home/bon/TelStat1.1-rc4

6. Set up Python environment:

        > setenv PYTHONPATH OSSO_TelStatLib
        > setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/opt/share/ssd/lib
        > setenv PATH .:${PATH}:/opt/share/ssd/bin

7. By default, OSS_OBS_HOST will be set to mobs1 for FAI simulator data.
   If this is what you want, just run TelStat, e.g.:

        > OSSO_TelStat

            OR

        > OSSO_TelStat -l -d        # data logging, debug mode

8. If you want summit data:

        > setenv OSS_OBS_HOST obs1
        > OSSO_TelStat

            OR

        > OSSO_TelStat -l -d        # data logging, debug mode

NOTE:  Log files generated by TelStat will now go into the
        /app/OSS/LOCAL/OSS_PRGLOG directory, which is local to
        each workstation.

_______________________________________________________

Scheduling termination of TelStat, in order to run when the next 
day is not a workday:

1. Run TelStat, as above

2. In another window, example for Friday evening:

        ps -fu o00096
        # find the PID of the job "python TelStat -d", call it <TPID>
        at 8 am saturday
        at> kill <TPID>
        at> <ctrl/d>

   ctrl/d, i.e. EOF, terminates the list

This will send a kill signal (15) to TelStat at the specified time, and
TelStat will close any open log file and terminate.

_______________________________________________________

Delivering a new version and running it [OUTDATED]:

[OUTDATED]1. On your home machine, in your development directory, make sure you have
   the latest version:

        cvs update

2. Test run to make sure the version you have works

[OUTDATED]3. Create a subdirectory with just the essential files.  This will eliminate
   any non-deliverable files:

        /sg1/ocs/bruceDev/TelStat/py/mkSave.py

[OUTDATED]4. Tar it, e.g.:

        tar cvf TelStat_2004_1_07_1151.tar TelStat_2004_1_07_1151

5. Log onto mdbs1, as above, and su -l to o00096, as above.  Then change 
   directory to the root directory for this delivery, e.g.

        cd bon

6. FTP to your home machine, use FTP binary mode and get the tar file from
   your development directory.  Then untar it and cd to the new directory, e.g.:

        tar xvf TelStat_2004_1_07_1151.tar
        cd TelStat_2004_1_07_1151

7. Change protections to allow you to modify TelStat and OSSC_screenPrint:

        chmod u+w TelStat OSSC_screenPrint

[OUTDATED]8. Using your favorite editor, change the first line of TelStat and 
   OSSC_screenPrint from "#!/usr/local/bin/python" to 
   "#!/opt/share/ssd/bin/python"

9. Go to the first set of instructions, number 4.

