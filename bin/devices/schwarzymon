#!/usr/bin/env python

# ------------------------------------------- #
#  __      _                                  #
# / _\ ___| |____      ____ _ _ __ _____   _  #
# \ \ / __| '_ \ \ /\ / / _` | '__|_  / | | | #
# _\ \ (__| | | \ V  V / (_| | |   / /| |_| | #
# \__/\___|_| |_|\_/\_/ \__,_|_|  /___|\__, | #
#                                      |___/  #
#                     _ _                     #
#   /\/\   ___  _ __ (_) |_ ___  _ __         #
#  /    \ / _ \| '_ \| | __/ _ \| '__|        #
# / /\/\ \ (_) | | | | | || (_) | |           #
# \/    \/\___/|_| |_|_|\__\___/|_|           #
#                                             #
# ------------------------------------------- #

import pygame
from pygame.locals import *
import os
import time
import sys
import numpy as np
import datetime as dt
from datetime import datetime

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
from   scexao_shm   import shm

hmsg = """SCHWARZY's INSTRUCTIONS
-------------------

controls:
----------------
SPACE  : start/stop data stream
CTRL+s : start/stop logging data
ESC    : quit schwarzymon

"""

args = sys.argv[1:]
zoom = 2    # zoom for the display of the maps (default is 4)
if args != []:
    if isinstance(int(args[0]),int):
        zoom = int(args[0])
        zoom = min(3,max(1,zoom))

# ------------------------------------------------------------------
#                       global variables
# ------------------------------------------------------------------
if not os.path.isfile("/tmp/humsensor.im.shm"):
    os.system("creashmim humsensor 3 1")
humshm = shm("/tmp/humsensor.im.shm") #SHM of data

# -----------------------
#   set up the window
# -----------------------
pygame.init()

FPS = 5                         # frames per second setting
fpsClock = pygame.time.Clock()  # start the pygame clock!
XW, YW = 320*zoom, 100*zoom     # window size
screen = pygame.display.set_mode((XW, YW), 0, 32)
pygame.display.set_caption('Sensors display!')
scounter = 0                    # save counter

os.system("tmux new-session -d -s humidity") #start a tmux session for messsages

# ------------------------------------------------------------------
#              !!! now we are in business !!!!
# ------------------------------------------------------------------

WHITE  = (255, 255, 255)
GREEN  = (  0, 255,   0) 
RED    = (255,   0,   0)
ORANGE = (255, 128,   0)
YELLOW = (255, 255,   0)
BLACK  = (  0,   0,   0)

# ----------------------------
#          labels
# ----------------------------
font1 = pygame.font.SysFont("default",   20*zoom)
font2 = pygame.font.SysFont("default",   14*zoom)
font3 = pygame.font.SysFont("monospace", 6*(zoom+1))
font4 = pygame.font.SysFont("monospace", 7+3*zoom)
font5 = pygame.font.SysFont("monospace", 7+3*zoom)
font5.set_bold(True)

path_cartoon = "/home/scexao/conf/schwarzymon_aux/Arnie_predator%d.png" % (zoom,)
cartoon1 = pygame.image.load(path_cartoon).convert_alpha()
rct_cart = cartoon1.get_rect()
rct_cart.bottomright = XW, YW+5*zoom
screen.blit(cartoon1,  rct_cart)

lbl = font1.render("SENSORS Monitor", True, WHITE)
rct = lbl.get_rect()
rct.center = (100*zoom, 15*zoom)
screen.blit(lbl, rct)

lbl2 = font1.render("Press [h] for help", True, WHITE)
rct2 = lbl2.get_rect()
rct2.center = (100*zoom, 30*zoom)
screen.blit(lbl2, rct2)

lbl3 = font2.render("Come on! Do it now!", True, WHITE)
rct3 = lbl3.get_rect()
rct3.center = (100*zoom, 45*zoom)
screen.blit(lbl3, rct3)

msgstr = "     STREAMING     "
infostr = font3.render(msgstr, True, GREEN, BLACK)
rct_str  = infostr.get_rect()
rct_str.center = (100*zoom, 60*zoom)

msgnstr = "!! NOT STREAMING !!"
infonstr = font3.render(msgnstr, True, BLACK, RED)

msghum1 = "   Humidity =            "
infohum1 = font3.render(msghum1, True, WHITE, BLACK)
rct_hum1  = infohum1.get_rect()
rct_hum1.center = (100*zoom, 72*zoom)
screen.blit(infohum1, rct_hum1)

msghum = "           " 
infohum = font3.render(msghum, True, WHITE, BLACK)
rct_hum  = infohum.get_rect()
rct_hum.midright = rct_hum1.midright
rcts0 = [rct_hum]

msgtemp1 = "Temperature =            "
infotemp1 = font3.render(msgtemp1, True, WHITE, BLACK)
rct_temp1  = infotemp1.get_rect()
rct_temp1.center = (100*zoom, 82*zoom)
screen.blit(infotemp1, rct_temp1)

msgtemp = "           "
infotemp = font3.render(msgtemp, True, WHITE, BLACK)
rct_temp  = infotemp.get_rect()
rct_temp.midright = rct_temp1.midright
rcts0.append(rct_temp)

msgdew1 = "  Dew point =            "
infodew1 = font3.render(msgdew1, True, WHITE, BLACK)
rct_dew1  = infodew1.get_rect()
rct_dew1.center = (100*zoom, 92*zoom)
screen.blit(infodew1, rct_dew1)

msgdew = "           "
infodew = font3.render(msgdew, True, WHITE, BLACK)
rct_dew  = infodew.get_rect()
rct_dew.midright = rct_dew1.midright
rcts0.append(rct_dew)

msgsave1 = "get to the choppa!"
msgsave2 = "     I'll save    "
msgsave3 = "    the data!!    "
savem1 = font5.render(msgsave1, True, RED, BLACK)
savem2 = font5.render(msgsave2, True, RED, BLACK)
savem3 = font5.render(msgsave3, True, RED, BLACK)
rct_savem1 = savem1.get_rect()
rct_savem2 = savem2.get_rect()
rct_savem3 = savem3.get_rect()
h_savem2 = savem2.get_height()
h_savem3 = savem3.get_height()
rct_savem1.bottomright = (XW-20*(zoom-1), YW-h_savem2-h_savem3)
rct_savem2.bottomright = (XW-20*(zoom-1), YW-h_savem3)
rct_savem3.bottomright = (XW-20*(zoom-1), YW)

cont_acq     = False 
saveim       = False # flag to save data
dispmsg      = True # flag to display the saving message
dispnmsg     = True # flag to not display the saving message
dispstr      = True # flag to display the streaming message
dispnstr     = True # flag to display the non-streaming message

cnt = humshm.get_counter()
timec = datetime.now()
pygame.display.update()

# ===================================================================
while True: # the main game loop
    
    cnti = humshm.get_counter()
    rcts = rcts0
    if cnti != cnt:
        cnt = cnti
        timec = datetime.now()
        humdata = humshm.get_data(False, True).astype(float)
        msghum = "%.2f %%   " % (humdata[0][0],)
        msgtemp = "%.2f degC" % (humdata[0][1],)
        msgdew = "%.2f degC" % (humdata[0][2],)
        if humdata[0][0] < 16:
            infohum = font3.render(msghum.rjust(11), True, WHITE, BLACK)
        elif humdata[0][0] < 17:
            infohum = font3.render(msghum.rjust(11), True, YELLOW, BLACK)
        elif humdata[0][0] < 18:
            infohum = font3.render(msghum.rjust(11), True, ORANGE, BLACK)
        else:
            infohum = font3.render(msghum.rjust(11), True, BLACK, RED)
        infotemp = font3.render(msgtemp.rjust(11), True, WHITE, BLACK)
        infodew = font3.render(msgdew.rjust(11), True, WHITE, BLACK)
        screen.blit(infohum, rct_hum)
        screen.blit(infotemp, rct_temp)
        screen.blit(infodew, rct_dew)
    else:
        timeci = datetime.now()
        if (timeci-timec).seconds > 2:
            if dispnstr:
                screen.blit(infonstr, rct_str)
                rcts.append(rct_str)
                cont_acq = False
                dispnstr = False
                dispstr = True
        else:
            if dispstr:
                screen.blit(infostr, rct_str)
                rcts.append(rct_str)
                cont_acq = True
                dispstr = False
                dispnstr = True
        # saving images
    tmuxon = os.popen('tmux ls |grep loghumidity | awk \'{print $2}\'').read()
    if tmuxon:
        saveim = True
    else:
        saveim = False
    if saveim:
        if dispmsg:
            savem1 = font5.render(msgsave1, True, RED, BLACK)
            savem2 = font5.render(msgsave2, True, RED, BLACK)
            savem3 = font5.render(msgsave3, True, RED, BLACK)
            screen.blit(savem1, rct_savem1)
            screen.blit(savem2, rct_savem2)
            screen.blit(savem3, rct_savem3)
            rcts.extend([rct_savem1, rct_savem2, rct_savem3])
            dispmsg = False
            dispnmsg = True
    else:
        if dispnmsg:
            savem1.fill((0,0,0))
            savem2.fill((0,0,0))
            savem3.fill((0,0,0))
            cartoon1.fill((0,0,0))
            screen.blit(savem1, rct_savem1)
            screen.blit(savem2, rct_savem2)
            screen.blit(savem3, rct_savem3)
            screen.blit(cartoon1, rct_cart)
            cartoon1 = pygame.image.load(path_cartoon).convert_alpha()
            screen.blit(cartoon1, rct_cart)
            rcts.extend([rct_savem1, rct_savem2, rct_savem3, rct_cart])
            dispnmsg = False
            dispmsg = True


    # =====================================
    for event in pygame.event.get():
        
        if event.type == QUIT:
            pygame.quit()
            print("Monitor has ended normally. I\'ll be back!")
            sys.exit()
            
        elif event.type == KEYDOWN:
            
            if event.key == K_ESCAPE:
                pygame.quit()
                print("Monitor has ended normally. I\'ll be back!")
                sys.exit()

            if event.key == K_SPACE:
                cont_acq = not cont_acq
                if cont_acq:
                    os.system("tmux send-keys -t humidity \"stream_humsensor &\" C-m")
                else:
                    os.system("tmux send-keys -t humidity \"stop_humsensor\" C-m")

            if event.key == K_h:
                print(hmsg)
            
            if event.key == K_s:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    saveim = not saveim
                    if saveim:
                        timestamp = dt.datetime.utcnow().strftime('%Y%m%d')
                        savepath = '/media/data/'+timestamp+'/humidity/'
                        ospath = os.path.dirname(savepath)
                        if not os.path.exists(ospath):
                            os.makedirs(ospath)
                        nimsave = 100
                        # creating a tmux session for logging
                        os.system("tmux new-session -d -s loghumidity")
                        os.system("tmux send-keys -t loghumidity \"logshim humsensor %i %s &\" C-m"%(nimsave, savepath))
                        os.system("log Humidity: start logging data")
                    else:
                        os.system("tmux send-keys -t loghumidity \"logshimkill humsensor\"")
                        os.system("tmux kill-session -t loghumidity")
                        os.system("log Humidity: stop logging data")

    pygame.display.update(rcts)
    fpsClock.tick(FPS)
    scounter += 1
    if scounter == FPS:
        scounter = 0

pygame.quit()
sys.exit()
