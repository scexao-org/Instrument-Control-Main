#!/usr/bin/env python

# ======================================================== #
#    ___       __    __  ___  __       _         _         #
#   / _ \_   _/ / /\ \ \/ __\/ _\     /_\  _   _| |_ ___   #
#  / /_)/ | | \ \/  \/ / _\  \ \     //_\\| | | | __/ _ \  # 
# / ___/| |_| |\  /\  / /    _\ \   /  _  \ |_| | || (_) | #
# \/     \__, | \/  \/\/     \__/   \_/ \_/\__,_|\__\___/  #
#        |___/                                             #
#    _   _ _                                               #
#   /_\ | (_) __ _ _ __                                    #
#  //_\\| | |/ _` | '_ \                                   #
# /  _  \ | | (_| | | | |                                  #
# \_/ \_/_|_|\__, |_| |_|                                  #
#            |___/                                         #
#                                                          #
# ======================================================== #

import serial
import os
import time
import binascii
import sys
import pdb
import matplotlib.pyplot as plt
import numpy as np
from scipy import ndimage
from scipy.signal import medfilt2d

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
from scexao_shm   import shm

plt.ion()
plt.show()


#Calibratiuon
#MLA Move +1000 = Cam move -10400
#To move beam from all four lenses to just one column, need 600 steps (similar in vertical and horizontal)


home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')

import zaber_chain
zabdev  = "/dev/serial/by-id/"
zabdev += "usb-FTDI_USB_Serial_Converter_FTG4YOPA-if00-port0"
zab = zaber_chain.zaber_chain(zabdev, quiet=True)
relative=False

cam  = shm("/tmp/zyladata.im.shm", False)

# ========================
CAMx,CAMy, CAMz = 2, 1, 3

MLAx, MLAy = 5, 4

COLl = 8
FCSl = 7
# ========================

threshold = 120.0

def cam_pos(img):
    labeled, nobj = ndimage.label(medfilt2d(img.astype(float)) > threshold)
    plt.imshow(labeled)
    mass = ndimage.center_of_mass(img, labeled, 0)
    return(mass)

def coadd_exp(nb):
    a = cam.get_data()
    for i in range(nb-1):
        a += cam.get_data()
    a /= float(nb)
    return(a)

# ========================
# ========================

def recenter_camera(cam, zab):
    a0 = coadd_exp(50)
    c0 = cam_pos(medfilt2d(a0.astype(float), 9))
    dstep = 100
    dxy = dstep * (np.array(c0) - np.array([60.0, 60.0]))

    posx = zab.status(CAMx, quiet=True)
    print "start", posx, "stop", posx + int(dxy[0])
    zab.move(CAMx, posx + int(dxy[0]), quiet=True)

    dummy = []
    while dummy == []:
        dummy = zab.status(CAMx, quiet=True)
        time.sleep(0.2)

    posy = zab.status(CAMy, quiet=True)
    print "start", posy, "stop", posy + int(dxy[1])
    zab.move(CAMy, posy + int(dxy[1]), quiet=True)
    return((int(dxy[0]), int(dxy[1])))

# ========================
# ========================

def recenter_MLA(cam, zab):
    a0 = medfilt2d(cam.get_data().astype(float), 9)#coadd_exp(50)
    plt.imshow(a0)
    mass = ndimage.center_of_mass(a0)
    print mass
    dstep = 25
    dxy = dstep * (np.array(mass) - np.array([60.0, 60.0]))
    print dxy

    posx = zab.status(MLAx, quiet=True)
    print "start", posx, "stop", posx - int(dxy[0])
    zab.move(MLAx, posx - int(dxy[0]), quiet=True)

    dummy = []
    while dummy == []:
        dummy = zab.status(MLAx, quiet=True)
        time.sleep(0.2)

    posy = zab.status(MLAy, quiet=True)
    print "start", posy, "stop", posy + int(dxy[1])
    zab.move(MLAy, posy + int(dxy[1]), quiet=True)
    return((int(dxy[0]), int(dxy[1])))


# =====================================================================
# =====================================================================
def main():
    #Access reference image and measure position of MLA and intensity distirbution
    #Move MLA in x to get balanced intensity across two lenses in Horizontal. Chase with camera
    #Move MLA in y to get balanced intensity across two lenses in vertical. Chase with camera.

    doit = False

    while doit:###????:
        #Moving MLA in x, actuator 5
        position = zab.status(5, quiet=True)
        zab.move(5, pos, relative=relative) #5 x for MLA
        while dummy == []:
            dummy = zab.status(5)
            time.sleep

        #Moving Cam in x, to compensate, actuator 2
        position = zab.status(2, quiet=True)
        zab.move(2, pos, relative=relative) #5 x for MLA
        while dummy == []:
            dummy = zab.status(2)
            time.sleep

if __name__ == "__main__":
    main()
