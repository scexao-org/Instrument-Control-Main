#!/usr/bin/env python

# ---------------------------------------------------- #
#      __  _    __    _       _                        #
#   /\ \ \/_\  / _\  /_\     /_\  _ __ ___   ___  ___  #
#  /  \/ //_\\ \ \  //_\\   //_\\| '_ ` _ \ / _ \/ __| #
# / /\  /  _  \_\ \/  _  \ /  _  \ | | | | |  __/\__ \ #
# \_\ \/\_/ \_/\__/\_/ \_/ \_/ \_/_| |_| |_|\___||___/ #
#                                                      #
#   _____       _             __                       #
#   \_   \_ __ | |_ ___ _ __ / _| __ _  ___ ___        #
#    / /\/ '_ \| __/ _ \ '__| |_ / _` |/ __/ _ \       #
# /\/ /_ | | | | ||  __/ |  |  _| (_| | (_|  __/       #
# \____/ |_| |_|\__\___|_|  |_|  \__,_|\___\___|       #
#                                                      #
# ---------------------------------------------------- #

import sys
import numpy as np
import os
import Image
import time
import math as m
import datetime as dt
from astropy.io import fits as pf
import subprocess

home = os.getenv('HOME')
conf_dir = home + "/conf/chuckcam_aux/"
sys.path.append(home+'/src/lib/python/')
import colormaps as cmaps
from xaosim.scexao_shmlib import shm
import image_processing as impro

# ------------------------------------------------------------------
#             short hands for opening and checking flags
# ------------------------------------------------------------------

def check_flag(flagname, write=False, value=0):
    if write:
        f = open(flagname, 'w')
        f.write('%d' %(value,))
    else:
        f = open(flagname)
        value = int([line.rstrip('\n') for line in f][0])
    f.close()
    return(value)

# ------------------------------------------------------------------
#                access to shared memory structures
# ------------------------------------------------------------------

camid = 0 # camera identifier (0: science camera)
cam = shm("/tmp/ircam%d.im.shm" % (camid,), verbose=False) # chuck shared memory
cam_dark = shm("/tmp/ircam%d_dark.im.shm" % (camid,), verbose=False) # chuck current dark
chn_ctrl = 7
dmc_ctrl  = shm('/tmp/dm00disp%02d.im.shm' % (chn_ctrl,)) # DM channel (control)
chn_probe = 6
dmc_probe  = shm('/tmp/dm00disp%02d.im.shm' % (chn_probe,)) # DM channel (probe)

# ------------------------------------------------------------------
#                Read parameters
# ------------------------------------------------------------------

args = sys.argv[1:]
run = int(args[0]) # run number
it0 = int(args[1]) # start iteration number
nim = int(args[2]) # number of images to average

# ------------------------------------------------------------------
#                Define paths
# ------------------------------------------------------------------

path_run = "/media/data/AMES/Run%04d/" % (run,)
path_DM = path_run+"DM/"
path_IM = path_run+"IMAGES/"
dm_flag = path_run+"DMstatus.txt"
im_flag = path_run+"IMAGEstatus.txt"

# ------------------------------------------------------------------
#                Initialize parameters
# ------------------------------------------------------------------

it = it0
cnt = 0 # intialize camera counters
cnt0 = -1

####################################################################
#                LOOP
####################################################################

while True:
    flagdm = check_flag(dm_flag)
    if not flagdm:
        time.sleep(0.1)
        sys.stdout.write('\r WAITING FOR DM COMMAND                  \r')
    else:
        sys.stdout.flush()
        check_flag(dm_flag,write=True,value=0)

        # ----------------------------------------------------------
        #                Read and send the new DM command
        # ----------------------------------------------------------
        
        dmit = pf.getdata(path_DM+"Run%04d_It%04d_DM.fits" % (run,it))
        ndmc = dmit.shape[0]
        for i in range(ndmc):
            if i == 0:
                dmc_ctrl.set_data(dmit[i,:,:].astype('float32'))
            else:
                dmc_probe.set_data(dmit[i,:,:].astype('float32'))
            time.sleep(0.01)
            
            # ------------------------------------------------------
            #                Create the averaged image
            # ------------------------------------------------------
            
            imit = 0 # initialize averaging counter
            while imit < nim:
                cnt = cam.get_counter() # read current image counter
                if cnt == cnt0:
                    time.sleep(0.001)
                else:
                    if imit == 0: # initialize the first iteration
                        ave_im = cam.get_data(check=True, reform=True, timeout=1.0).astype('float')/float(nim)
                    else: # accumulate to average
                        ave_im += cam.get_data(check=True, reform=True, timeout=1.0).astype('float')/float(nim)
                    sys.stdout.write('\r run %d iter %4d dmcom %d acqu #%5d\r' % (run,it,i,imit))
                    sys.stdout.flush()
                    imit += 1
                    cnt0 = cnt
            
            # ------------------------------------------------------
            #                Process the image
            # ------------------------------------------------------
            
            bias = cam_dark.get_data(check=True, reform=True, timeout=1.0).astype('float') # load bias
            ave_im -= bias # subtract bias
            temp, ave_im2 = impro.find_outlier_pixels(ave_im, tolerance=2.5) # remove bad pixels
            
            # ------------------------------------------------------
            #                Concatenate cube
            # ------------------------------------------------------
            
            if i == 0:
                im_cube = np.zeros((ndmc,ave_im2.shape[0],ave_im2.shape[1]))
            im_cube[i,:,:] = ave_im2

        # ----------------------------------------------------------
        #                Save image
        # ----------------------------------------------------------
        
        dmc_probe.set_data(np.zeros((50,50)).astype('float32'))
        pf.writeto(path_IM+"Run%04d_It%04d_IMAGE.fits" % (run,it), im_cube.astype('float32'), overwrite=True)
        check_flag(im_flag,write=True,value=1)
        it += 1

# ------------------------------------------------------------------
#                Close shared memory
# ------------------------------------------------------------------

cam.close()
cam_dark.close()
dmc_ctrl.close()
dmc_probe.close()
