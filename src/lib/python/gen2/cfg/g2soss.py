#############################################################################
# Configuration file for OCS Gen 2 SOSS compatibility mode front ends
#############################################################################
#
#[ Eric Jeschke (eric@naoj.org) --
#  Last edit: Fri Jan 27 16:17:30 HST 2012
#]
#
"""
This file sets up environment variables and paths for Gen2
using SOSS front ends (GUIs) in 'SOSS compatibility mode'.
"""
import sys, os
import SOSS.SOSSrpc as SOSSrpc
# Used for dynamically looking up hostnames for legacy static interfaces
import remoteObjects as ro
from Bunch import Bunch
import cfg.INS

# For errors generated by configuration
class Error(Exception):
    pass


# Set up base areas for GEN2HOME
try:
    # Is GEN2HOME variable set?
    gen2home = os.environ['GEN2HOME']

except KeyError:
    print "You need to set your GEN2HOME environment variable"
    print "to where your top-level checkout of Gen2 is"
    print "or else run this directly from inside the directory"
    sys.exit(1)
    
# Set up base areas for SOSSHOME and CONFHOME
try:
    # Is SOSSHOME variable set?
    sosshome = os.environ['SOSSHOME']

except KeyError:
    # Try looking for expected things based on the current directory
    if os.path.isdir('../src/VGW') and os.path.isdir('../src/QDASVGW'):
        sosshome = os.path.abspath('..')
    else:
        print "You need to set your SOSSHOME environment variable"
        print "to where your top-level checkout of Gen2 SOSS is"
        print "or else run this directly from inside the bin directory"
        sys.exit(1)
    
dirload  = sosshome + '/bin'

try:
    # Is CONFHOME variable set?
    confhome = os.environ['CONFHOME']
    conf_sfx = ''

except KeyError:
    # Use sosshome.  This should usually work and is preferred.
    confhome = sosshome + '/src'
    conf_sfx = '/conf'

try:
    # Is DATAHOME variable set?
    datahome = os.environ['DATAHOME']

except KeyError:
    # Use /tmp
    print "*** WARNING *** data will be stored in $HOME !!"
    print "Please set your DATAHOME variable to override this behavior."
    datahome = os.environ['HOME']
    
try:
    # Is LOGHOME variable set?
    loghome = os.environ['LOGHOME']

except KeyError:
    # Use /tmp
    print "*** WARNING *** No LOGHOME defined"
    loghome = '/tmp'

archhome = None
try:
    # Is ARCHHOME variable set?
    archhome = os.environ['ARCHHOME']

except KeyError:
    print "*** WARNING *** No ARCHHOME defined"

# Configuration areas used by varous subsystems and their components
daqvgwhome = confhome + '/VGW' + conf_sfx
#daqvgwhome = '/tmp' + '/VGW' + conf_sfx
qdasvgwhome = confhome + '/QDASVGW' + conf_sfx
#qdasvgwhome = '/tmp' + '/QDASVGW' + conf_sfx
qdashome = confhome + '/QDAS' + conf_sfx
qdastkhome = confhome + '/QDAStk' + conf_sfx
producthome = confhome + '/product' + conf_sfx
# NOTE: Currently, TelStat is in a different repository
telstathome = gen2home + '/telstat'
soundhome = producthome + '/file/Sounds'

# Create object for getting information about instruments
insconfig = cfg.INS.INSdata()


def get_hosts(insname):
    try:
        # Query the name server on the Gen2 host for the service
        # names of the instrument and the status subsystems
        ro.init()
        ns = ro.getns()

        insint_hosts = ns.getHosts(insname)
        if len(insint_hosts) == 0:
            raise Error("No instrument interface found")

        status_hosts = ns.getHosts('status')
        if len(insint_hosts) == 0:
            raise Error("No status interface found")

        # Strip off FQDN to short name
        cmds = insint_hosts[0][0].split('.')[0]
        sdst = status_hosts[0][0].split('.')[0]

        d = Bunch(obshost=cmds, gethost=cmds, obchost=cmds,
                  stathost=sdst)
        return d
    
    except Exception, e:
        raise Error("Couldn't get information: %s" % str(e))


def check_env(env):
    # Double check env variables, make sure they are all strings
    for key, val in env.items():
        if type(val) != str:
            env[key] = str(val)
    return env


def make_env_common(options):
    """
    Make needed environment variables common to most subsystems.
    """

    envvars = {
        # For TCL/TK
        'TCL_LIBRARY':          sosshome + '/lib/tcl8.4',
        'TK_LIBRARY':           sosshome + '/lib/tk8.4',
        
        # General SOSS
        'SOSSHOME': 		sosshome,
        'OSS_LOAD_MODULE': 	dirload,
        'PATH':                 dirload + ':' + os.environ['PATH'],
        }

    if options.display != None:
        envvars['DISPLAY'] = options.display
    elif os.environ.has_key('DISPLAY'):
        envvars['DISPLAY'] = os.environ['DISPLAY']

    return check_env(envvars)


def make_env_fitsview(options):
    """
    Make needed environment variables to run the 'fast' FITS viewer.
    """
    envvars = make_env_common(options)
    envvars.update({
        'FITSVIEW_HOME':	'/tmp',
        })

    return check_env(envvars)


def make_env_telstat(options):
    """
    Make needed environment variables to run TelStat.
    """
    envvars = make_env_common(options)
    envvars.update({ 
       'OSS_LOAD_MODULE':      dirload,
       #'OSS_SOUND':            telstathome,
       'OSS_SOUND':            soundhome,
       'PYTHONPATH':           telstathome + '/OSSO_TelStatLib:' + os.environ['PYTHONPATH'],
        
        })

    return check_env(envvars)


def make_env_insmon(options):
    """
    Make needed environment variables to run Instrument Monitor.
    """
    envvars = make_env_common(options)
    envvars.update({ 
       'OSS_LOAD_MODULE':      dirload,
       'OSS_SOUND':            soundhome,
       'OSSO_OBCPSTAT':        producthome + '/file/OSSO_OBCPSTAT',
       'RO_CONFIG':            daqvgwhome + '/dat/remoteObjects.cfg',
        })

    return check_env(envvars)


def make_env_skymon(options):
    """
    Make needed environment variables to run Skymonitor viewer.
    """
    envvars = make_env_common(options)
    envvars.update({
        # for QDASvgw
        'QDASVGWHOME':		qdasvgwhome,
        'QDAS_SKYMON_GEOMETRY': '713x812+1151-31',
        'SKYCAT_CONFIG':	'file:///' + qdasvgwhome + '/skycat/skycat.cfg',
        'RO_CONFIG':            daqvgwhome + '/dat/remoteObjects.cfg',
        })

    return check_env(envvars)


def make_env_vgw(options):
    """
    Make needed environment variables to run the VGW subsystem.
    """

    # What host(s) are we supposed to be talking to?
    myhost = SOSSrpc.get_myhost(short=True)
    if options:
        if options.gen2:
            hosts = get_hosts('VGW')

            obchost = hosts.obchost
            obshost = hosts.obshost
            gethost = hosts.gethost
            stathost = hosts.stathost

        elif options.daqhost:
            obchost = options.daqhost
            obshost = options.daqhost
            gethost = options.daqhost
            stathost = options.daqhost

        else:
            if options.obchost:
                obchost = options.obchost
            else:
                obchost = myhost

            if options.obshost:
                obshost = options.obshost
            else:
                obshost = myhost

            if options.gethost:
                gethost = options.gethost
            else:
                gethost = myhost

            if options.stathost:
                stathost = options.stathost
            else:
                stathost = myhost

    envvars = make_env_common(options)

    display = envvars.get('DISPLAY', ':0')

    envvars.update({
        # DAQvgw
        'DAQVGWHOME':		daqvgwhome,
        'DAQVGW_IPCKEY_UP': 	268435456,
        'SLEEP_TIME_SKYCAT':	4,
        'SLEEP_TIME_INIT':	2,
        'SLEEP_TIME_NEWWINDOW':	2,
        'AG_ID':		'0006',
        'SV_ID':		'0007',
        'SH_ID':		'0009',
        'FMOS_ID':		'003B',
        'VGW_RCV_TIME':		1,
        'VGW_WAIT_TIME':	10,
        'VGW_FRAME_NAME':	'VGW',
        'MAX_RPC_LOG':		100000,
        'MAX_DATA_LOG':		100000,
        'MAX_FTP_LOG':		10000000,
        'MAX_BYTE_ERR_LOG':	10000000,
        'VGW_OBS_CMD':		obshost,
        'VGW_OBS_STAT':		stathost,
        'OBS_CMD2':		obshost,
        'OBS_STAT2':		stathost,
        'MON_DISPLAY':		display,
        'MON_AG_DISPLAY':	display,
        'MON_SV_DISPLAY':	display,
        'MON_SH_DISPLAY':	display,
        'VGW_SUBSYS_GEOMETRY':  '1286x808+4-76',
        'AG_SKYCAT_GEOMETRY':   '713x812+8+24',
        'SV_SKYCAT_GEOMETRY':	'713x812+729+33',
        'SH_SKYCAT_GEOMETRY':	'713x812+1199+34',
        #
        # for QDASvgw
        #
        'QDASVGWHOME':		qdasvgwhome,
        'QDAS_SKYCAT_GEOMETRY': '713x812+1151-31',
        'QDAS_AGLIST_GEOMETRY': '57x11+46-39',
        'QDASVGW_IPCKEY_UP':	'268435456',
        'SKYCAT_CONFIG':	'file:///' + qdasvgwhome + '/skycat/skycat.cfg',
        'MAX_OFF_ALPHA':	0.00028,
        'MAX_OFF_DELTA':	0.00028,
        'QDAS_SLEEP_TIME_SKYCAT': 2,
        'SLEEP_TIME_AUTO':	2,
        'QDASVGW_DSS_NAME':	'dss1@summit_faster',
        'QDASVGW_DSS1_NAME':	'dss1@summit_faster',
        'QDASVGW_DSS2R_NAME':	'dss2r@summit_faster',
        'QDASVGW_DSS2B_NAME':	'dss2b@summit_faster',
        'QDASVGW_DSS2I_NAME':	'dss2i@summit_faster',
        'QDASVGW_DSS_EQUINOX':	2000,
        #
        # for DAQvgw toolkit (a version of DAQtk)
        #
        'RO_CONFIG':            daqvgwhome + '/dat/remoteObjects.cfg',
        'DAQTKHOME':		daqvgwhome + '/toolkit',
        'MAX_BYTE_RPC_LOG':	'10000000',
        'MAX_GNRT_RPC_LOG':	'11',
        'MAX_BYTE_ERR_LOG':	'10000000',
        'FITS_KEYWD_INF':	daqvgwhome + '/dat/fits.txt',
        'DAQTK_IPCKEY_UP':	'0',
        'CMDOBCP':		myhost,
        'CMDOBS':		obshost,
        'THROUGHOBCP':		myhost,
        'THROUGHOBS':	        obshost,
        'STATOBCP':		myhost,
        'STATOBS':		stathost,
        'DATOBCP':		myhost,
        'DATOBC':		obchost,
        'GETOBCP':		myhost,
        'GETOBS':		gethost,
        })

    return check_env(envvars)


def make_env_qdas(options):

    envvars = make_env_common(options)
    envvars.update({
        'SLEEP_TIME_SKYCAT':	    1,
        #'SLEEP_TIME_INIT':         2,
        'SLEEP_TIME_INIT':          1,
        'SLEEP_TIME_NEWWINDOW':	    1,

        'QDASHOME':                 qdashome,
        'QDASTKHOME':               qdastkhome,
        'QDAS_DEV_WORK':            qdashome + '/workspace/SUKA',
        'QDASOBC':                  'localhost',
        'QDAS_F_VALUE':             '12.0',
        'QDASMAXLOG':               '10000000',
        'FITS_KEYWD_INF':           qdashome + '/data/fits.txt',
        'QDAS_USER_MVGW':           os.environ['LOGNAME'],
        'QDAS_USER_MOWS1':          os.environ['LOGNAME'],
        'QDAS_USER_OWS1':           os.environ['LOGNAME'],
        'QDAS_USER_OWS2':           os.environ['LOGNAME'],
        'QDAS_USER_VGW':            os.environ['LOGNAME'],
        'QDAS_USER_MOWS':           os.environ['LOGNAME'],
        'QDAS_USER_LOCAL':          os.environ['LOGNAME'],
        'FTPPATH_9':                datahome + '/obcp09',
        'FTPPATH_33':               datahome + '/obcp33',
        })

    for obcpnum in insconfig.getNumbers():
        envvars['QDAS_OBCP%02d_WORK' % obcpnum] = qdashome + '/workspace/' + \
            insconfig.getNameByNumber(obcpnum)

    return check_env(envvars)


def make_env_integgui(options):

    envvars = make_env_common(options)
    envvars.update({
        'OSSO_ICON_DIR':        producthome + '/file',
        'OSSO_IMAGE':           producthome + '/file',
        'OSS_SOUND':            soundhome,
        'OSSO_SETTING':         producthome + '/file',
        #'OSSO_ICMDDIR':         sosshome + '/src/product/OSSO/OSSO_ICMDDIR',
        'OSSO_ICMDDIR':         producthome + '/file/Launchers',
        'OSSO_INTEG_LOCALE':    'Summit',
        #'OSSO_RM_HOST':        'localhost',
        'OSS_MYLOCALE':         'Summit',
        'OSSO_TMP':             '/tmp',
        'OSSO_DEF_PPHOME':      os.environ['HOME'],
        'OSSO_PROC':            os.environ['HOME'] + '/Procedure',
        })

    return check_env(envvars)


# Mapper from subsystem to environment creation function
#
make_env_map = {'SKYMON': make_env_skymon,
                'FITSVIEW': make_env_fitsview,
                'QDAS': make_env_qdas,
                'VGW': make_env_vgw,
                'INTEGGUI': make_env_integgui,
                'TELSTAT': make_env_telstat,
                'INSMON': make_env_insmon,
                }
    
def make_env(subsys, options=None):
    try:
        env_fn = make_env_map[subsys.upper()]

    except KeyError:
        raise g2sossError("No such subsystem: '%s'" % subsys)

    try:
        return env_fn(options)

    except Exception, e:
        raise Error("Configuration error in g2soss: %s" % str(e))

    
#############################################################################
# Log files configuration
#############################################################################
def get_logdir(logfile):
    try:
        logdir = os.environ['LOGHOME']

    except KeyError:
        try:
            logdir = ('%s/log' % os.environ['SOSSHOME'])

        except KeyError:
            raise Error("LOGHOME and SOSSHOME env vars are undefined")

    return logdir


#############################################################################
# Sound configuration
#############################################################################
def get_sound_prog():
    """Get the sound playing program."""
    try:
        return os.environ['G2SNDPRG']

    except KeyError:
        # Pulse Audio network player?
        playprog = '%s/g2play.py' % dirload
        if os.path.exists(playprog):
            return playprog

        raise Error("G2SNDPRG env var is undefined, and no sound program found")


locations = Bunch(
    summit = Bunch(hosts=Bunch(
            h1 = Bunch(
                host = 'libra.sum.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    # d1 = Bunch(xdisp='vgw:0.1', geometry='+5+47'),
                    # d2 = Bunch(xdisp='vgw:0.0', geometry='+5+1235'),
                    ) ),
            h2 = Bunch(
                host = 'mira.sum.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    # d1 = Bunch(xdisp='ows2:0.1', geometry='+5+47'),
                    # d2 = Bunch(xdisp='ows2:0.0', geometry='+5+1235'),
                    ) ),
            h3 = Bunch(
                host = 'rana.sum.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    # d1 = Bunch(xdisp='ows1:0.1', geometry='+5+47'),
                    # d2 = Bunch(xdisp='ows1:0.0', geometry='+5+1235'),
                    ) ),
            ) ),

    hilo = Bunch(hosts=Bunch(
            h1 = Bunch(
                host = 'deneb.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    # d1 = Bunch(xdisp='hows1:0.1', geometry='+5+47'),
                    # d2 = Bunch(xdisp='hows1:0.0', geometry='+5+1235'),
                    ) ),
            h2 = Bunch(
                host = 'pollux.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    # d1 = Bunch(xdisp='hows2:0.1', geometry='+5+47'),
                    # d2 = Bunch(xdisp='hows2:0.0', geometry='+5+1235'),
                    ) ),
            h3 = Bunch(
                host = 'spica.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    # d1 = Bunch(xdisp='hows3:0.1', geometry='+5+47'),
                    # d2 = Bunch(xdisp='hows3:0.0', geometry='+5+1235'),
                    ) ),
            ) ),

    # mitaka = Bunch(hosts=Bunch(
    #         h1 = Bunch(
    #             host = 'sbows2', index=2,
    #             displays = Bunch(
    #                 d1 = Bunch(xdisp='sbows2:0.1', geometry='+5+47'),
    #                 d2 = Bunch(xdisp='sbows2:0.0', geometry='+5+1235'),
    #                 ) ),
    #         h2 = Bunch(
    #             host = 'sbana', index=0,
    #             displays = Bunch(
    #                 d1 = Bunch(xdisp='sbana:0.1', geometry='+5+47'),
    #                 d2 = Bunch(xdisp='sbana:0.0', geometry='+5+1235'),
    #                 ) ),
    #         h3 = Bunch(
    #             host = 'sbows1', index=1,
    #             displays = Bunch(
    #                 d1 = Bunch(xdisp='sbows1:0.1', geometry='+5+47'),
    #                 d2 = Bunch(xdisp='sbows1:0.0', geometry='+5+1235'),
    #                 ) ),
    #         ) ),

    mitaka = Bunch(hosts=Bunch(
            h1 = Bunch(
                host = 'hidari.rem.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    ) ),
            h2 = Bunch(
                host = 'mannaka.rem.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    ) ),
            h3 = Bunch(
                host = 'migi.rem.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    ) ),
            ) ),
    ocs = Bunch(hosts=Bunch(
            h1 = Bunch(
                host = 'mimosa.subaru.nao.ac.jp', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    ) ),
            h2 = Bunch(
                host = 'makalii2.subaru.nao.ac.jp', index=1,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    ) ),
            h3 = Bunch(
                host = 'rasalas.subaru.nao.ac.jp', index=2,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+5+1235'),
                    ) ),
            ) ),

    solo = Bunch(hosts=Bunch(
            h1 = Bunch(
                host = 'localhost', index=0,
                displays = Bunch(
                    d1 = Bunch(xdisp=':0.0', geometry='+5+47'),
                    d2 = Bunch(xdisp=':0.0', geometry='+2005+47'),
                    ) ),
            ) ),

        )

def get_displays(loc):
    try:
        b1 = locations[loc.lower()]
        
        num_displays = len(b1.hosts.keys())

        res = []
        for i in xrange(num_displays):
            b2 = b1.hosts['h%d' % (i+1)]
            up = b2.displays.d1
            dn = b2.displays.d2
            res.append((Bunch(host=b2.host, xdisp=up.xdisp, geom=up.geometry),
                        Bunch(host=b2.host, xdisp=dn.xdisp, geom=dn.geometry))
                       )
    except KeyError, e:
        raise e

    return res

    
#END
