#!/usr/bin/env python

# ======================================================== #
#    ___  ___   ________         _      _          __  __  #
#   / _ \/ __\ / __\_   \  _ __ (_) ___| | _____  / _|/ _| #
#  / /_)/ /   / _\  / /\/ | '_ \| |/ __| |/ / _ \| |_| |_  #
# / ___/ /___/ / /\/ /_   | |_) | | (__|   < (_) |  _|  _| #
# \/   \____/\/  \____/   | .__/|_|\___|_|\_\___/|_| |_|   #
#                         |_|                              #
#                                                          #
# ======================================================== #

import os
import sys
import time

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import logit #Custom logging library
import conex2 as conex
con = conex.conex()

# SPECIFIC PARAMETERS FOR THIS STAGE

cid = "/dev/serial/by-id/"
cid += "usb-Newport_CONEX-AGP_A606QE97-if00-port0"

conexname = "pcfi_pickoff"

# GENERIC CODE

filename = "/home/scexao/bin/devices/conf/conf_"+conexname+".txt"

slots = [line.rstrip('\n') for line in open(filename)]
nslots = len(slots)
nparam = len(slots[0].split(';'))
for i in range(nparam):
    exec "param%d = []" % (i,)

for j in range(nslots):
    sparam = slots[j].split(';')
    for i in range(nparam):
        exec "param%d.append(sparam[i])" % (i,)

def usage():
    print """---------------------------------------
Usage: %s <command> <arg>
---------------------------------------
COMMAND:
    status     displays status
    home       sends home
    goto       moves position: numerical value
    in/out     move optics in/out of the beam
    ramp       ramp of values around the in position
ARG:
    position (between 0 and 27 mm) or amplitude of scan
    number of steps for the scan
    time in sec between steps
EXAMPLES:
    %s home
    %s in
    %s goto 5
    %s ramp 0.1 5 (scan +-0.1mm around in position with 5 steps)
CONTENT:""" % (conexname,conexname,conexname,conexname,conexname)
    for i in range(nslots):
        print "   ", param0[i], param1[i]
        
    print "--------------------------------------- "
    sys.exit()

def quickhelp():
    print "%20s       Post-coro fiber injection pickoff mirror" % (conexname,)

# =====================================================================
# =====================================================================

def main():
    args = sys.argv[1:]
    na = args.__len__()

    quiet = True
    if args == []:
        usage()

    else:
        if "--help1" in args[0].lower():
            quickhelp()

        elif "home" in args[0].lower():   #Home command
            con.open(cid, conexname)
            con.home(conexname)
            con.close()
            logit.logit(conexname,'Homed')
            sys.exit()
            
        elif ("?" in args[0].lower()) or ("st" in args[0].lower()):
            con.open(cid, conexname)
            con.status(conexname)
            con.close()
            sys.exit()
            
        elif "in" in args[0].lower():
            con.open(cid, conexname)
            pos = param2[0]
            con.move(float(pos), conexname)
            con.close()
            logit.logit(conexname,'moved_to_in_'+pos)
            
        elif "out" in args[0].lower():
            con.open(cid, conexname)
            pos = param2[1]
            con.move(float(pos), conexname)
            con.close()
            logit.logit(conexname,'moved_to_out_'+pos)
        
        elif "goto" in args[0].lower():  #Goto commands
            if na < 2:
                usage()
            elif args[1].isdigit():
                pos = args[1]
                if (0 <= float(pos) <= 27):
                    con.open(cid, conexname)
                    con.move(float(pos), conexname)
                    con.close()
                    logit.logit(conexname,'moved_to_pos_'+pos)
                else:
                    print("Stage moves only between 0 and 27 mm")
            else:
                usage()

        elif "ramp" in args[0].lower():
            if na < 4:
                usage()
            elif isinstance(float(args[1]),float) and isinstance(int(args[2]),int):
                pos_in = float(param2[0])
                pos_max = float(args[1])
                nsteps = int(args[2])
                st = float(args[3])
                if ((pos_in-pos_max)>=0) and ((pos_in+pos_max)<=27):
                    logit.logit(conexname,'start_scaning')
                    con.open(cid, conexname)
                    con.move(pos_in-pos_max, conexname)
                    logit.logit(conexname,'scanning_to_pos_'+str(pos_in-pos_max))
                    time.sleep(1)
                    for i in range(nsteps+1):
                        posi = pos_in+(2.*i/nsteps-1)*pos_max
                        con.move(posi, conexname)
                        logit.logit(conexname,'scanning_to_pos_'+str(posi))
                        time.sleep(st)
                    logit.logit(conexname,'stop_scaning')
                    time.sleep(1)
                    con.move(pos_in, conexname)
                    con.close()
                    logit.logit(conexname,'moving_to_pos_in_'+param2[0])
                else:
                    print("Value must be between 0 and 27. Try again...\n")
            else:
                usage()
   
        else:
            usage()


# =====================================================================
if __name__ == "__main__":
    main()
