#!/usr/bin/env python

# ================================================================== #
#    ___ _ _                 _        _           _   _              #
#   / __(_) |__   ___ _ __  (_)_ __  (_) ___  ___| |_(_) ___  _ __   #
#  / _\ | | '_ \ / _ \ '__| | | '_ \ | |/ _ \/ __| __| |/ _ \| '_ \  #
# / /   | | |_) |  __/ |    | | | | || |  __/ (__| |_| | (_) | | | | #
# \/    |_|_.__/ \___|_|    |_|_| |_|/ |\___|\___|\__|_|\___/|_| |_| #
#                                  |__/                              #
#                      _                                             #
#   ___ __ _ _ __ _ __(_) __ _  __ _  ___                            #
#  / __/ _` | '__| '__| |/ _` |/ _` |/ _ \                           #
# | (_| (_| | |  | |  | | (_| | (_| |  __/                           #
#  \___\__,_|_|  |_|  |_|\__,_|\__, |\___|                           #
#                              |___/                                 #
#                                                                    #
# ================================================================== #

import sys
import os
import time
import pdb
import subprocess


home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import ezstep_chain3 as ezstep_chain
import logit #Custom logging library

ttmdev  = "/dev/serial/by-path/"
ttmdev += "pci-0000:00:1d.0-usb-0:1.2.2:1.0-port0" # all steppers

stagename = "fibinj_car"
idn=3

def usage():
    print("""---------------------------------------
Usage: fibinj_car <command>
---------------------------------------
command:\n-------
    status     displays camera status
    home       sends the camera home
    goto       moves camera to position: numerical value
    reset      home, then come back\n
arg:\n---
    numerical value (zaber steps)
examples:\n--------
   fibinj_car status
   fibinj_car goto 1000000
   fibinj_car home
   fibinj_car reset
--------------------------------------- """)
    sys.exit()

def quickhelp():
    print("%20s       Fiber injection carriage" % (stagename,))

# =====================================================================
# =====================================================================
def main():
    args = sys.argv[1:]  # list of read arguments
    na = args.__len__()  # number of arguments
    quiet = False

    if args == []: usage()

    elif "--help1" in args[0].lower():
        quickhelp()

    elif "reset" in args[0].lower():
        # re-init the stepper parameters
        ttm = ezstep_chain.ezstep_chain(ttmdev)
        ttm.init_smi(quiet=False)
        time.sleep(2)
        ttm.close()        
        sys.exit()
    
    elif "home" in args[0].lower():
        ttm = ezstep_chain.ezstep_chain(ttmdev)
        position = ttm.home(idn)
        pos0 = -1.5
        pos = ttm.current_pos(idn)
        print(pos)
        while pos0 != pos:
            pos0 = pos
            pos = ttm.current_pos(idn)
            time.sleep(0.2)
            subprocess.call(["scexaostatus", "set", stagename, str(pos)])
        ttm.close()
        
    elif "status" in args[0].lower():
        ttm = ezstep_chain.ezstep_chain(ttmdev)
        position = ttm.current_pos(idn)
        subprocess.call(["scexaostatus", "set", stagename, str(position)])
        ttm.close()
        print(position)
        
    elif "goto" in args[0].lower():
        if na < 2: # safety
            usage()
            
        try:
            pos = int(args[1])
        except:
            usage()
            
        if (0<= pos <= 11500000):
            ttm = ezstep_chain.ezstep_chain(ttmdev)
            ttm.goto(idn, pos)#4
            pos0 = -1.5
            pos = ttm.current_pos(idn)
            while pos0 != pos:
                pos0 = pos
                pos = ttm.current_pos(idn)
                time.sleep(0.2)
                subprocess.call(["scexaostatus", "set", stagename, str(pos)])
            ttm.close()
            logit.logit('SMI_car_axis','moved_to_position_'+str(pos))
        else:
            usage()
    else:
        usage()

if __name__ == "__main__":
    main()

    # these lines are here for quick debugging purposes
    # -------------------------------------------------
    #zab = zaber_chain.zaber_chain(zabdev, quiet=True)
