#!/usr/bin/env python

# ======================================================== #
#  _   _       _      ___             _                    #
# | | | | ___ | |_   / __\ ____  ___ | |_                  #
# | --- |/ _ \| __|  \_\_ |  _ \/ _ \| __|                 #
# | --- | (_) | |_   __\ \| (_) |(_) | |_                  #
# |_| |_|\___/\___|  \___/|  __/\___/\___|                 #
#                         |_|                              #
#    _   _ _                                               #
#   /_\ | (_) __ _ _ __                                    #
#  //_\\| | |/ _` | '_ \                                   #
# /  _  \ | | (_| | | | |                                  #
# \_/ \_/_|_|\__, |_| |_|                                  #
#            |___/                                         #
#                                                          #
# ======================================================== #

import os
import time
import sys
import pdb
import numpy as np
from astropy.io import fits as pf
import numpy.linalg as la

from scxkw.config import REDIS_DB_HOST, REDIS_DB_PORT
from scxkw.redisutil.typed_db import Redis

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
from camera_tools import cam_cmd
#from xaosim.scexao_shmlib import shm
from pyMilk.interfacing.isio_shmlib import SHM as shm


# ------------------------------------------------------------------
#  Read database for some stage status
# ------------------------------------------------------------------
def RDB_pull(rdb):

    fits_keys_to_pull = {'X_NULPKO'}
    # Now Getting the keys
    with rdb.pipeline() as pipe:
        for key in fits_keys_to_pull:
            pipe.hget(key, 'FITS header')
            pipe.hget(key, 'value')
        values = pipe.execute()
    status = {k: v for k,v in zip(values[::2], values[1::2])}

    gpin = status['X_NULPKO'].strip() == 'IN'

    return(gpin)

# ------------------------------------------------------------------
#            Configure communication with SCExAO's redis
# ------------------------------------------------------------------
rdb = Redis(host=REDIS_DB_HOST, port=REDIS_DB_PORT)
# Is the server alive ?
try:
    alive = rdb.ping()
    if not alive:
        raise ConnectionError
except:
    print('Error: can\'t ping redis DB.')
    sys.exit(1)

gpin = RDB_pull(rdb)


# Reading in shared memory
#------------------------
shm_im = shm("ircam0")
shm_im_dark = shm("ircam0_dark")
shm_im_badpixmap = shm("ircam0_badpixmap")
dm = shm("dm00disp08")

dark_palila = shm_im_dark.get_data()
badpixmap_palila = shm_im_badpixmap.get_data()


args = sys.argv[1:]
if args != []:
    if len(args) == 5:
        x0 = float(args[0])
        y0 = float(args[1])
        dtime = int(args[2])
        gain = float(args[3])
        a = int(args[4])
    if len(args) == 4:
        x0 = float(args[0])
        y0 = float(args[1])
        dtime = int(args[2])
        gain = float(args[3])
        a = 16
    elif len(args) == 3:
        x0 = float(args[0])
        y0 = float(args[1])
        dtime = int(args[2])
        gain = 0.01
        a = 16
    elif len(args) == 2:
        x0 = float(args[0])
        y0 = float(args[1])
        dtime = 0
        gain = 0.01
        a = 16
        
else:
    x0 = y0 = 0
    dtime = 0
    gain = 0.01 #Gain of the loop 
    a = 16
        


# Find center of image
#------------------------

def find_center(im_palila, shiftx, shifty, timeout, c0):
    imax = np.max(im_palila)
    imin = imax*0.05
    im_palila -= imin
    mask = im_palila > 0
    im_palila *= mask
    #print(imax)
    if imax < 100:
        timeout += 1
        cx = c0[0]
        cy = c0[1]
        if timeout < 30:
            time.sleep(1)
        else:
            print("Not enough flux, aborting")
            sys.exit()
    else:
        timeout = 0
        total = np.sum(im_palila)
        X, Y = np.indices(np.shape(im_palila)) 
        cx = np.sum(Y*im_palila)/total
        cy = np.sum(X*im_palila)/total
        cx = cx-shiftx
        cy = cy-shifty
    return([cx, cy],timeout)

# Main
#------------------------

# ------------------------------------------------------------------
#                        Parameters
# ------------------------------------------------------------------

modes = pf.getdata('/home/scexao/bin/devices/DM_modes2.fits')

scale = -0.05#12.1e-3/3600./180*m.pi*18/


modes *= -scale*gain

dmc = np.zeros((50,50))

timeout0 = 0
# parameters of the target point
with open('/home/scexao/conf/palila_aux/hotspots.txt') as file:
    pos = np.array([[float(digit) for digit in line.split()] for line in file])

pscale = 16.2 #mas per pixel in Palila

filename = "/home/scexao/conf/palila_aux/hotspots_cor.txt"
cors = [line.rstrip('\n') for line in open(filename)]
ncor = len(cors)
cort = np.zeros((2,ncor))
for i in range(ncor):
    corparam = cors[i].split(';')
    cort[0,i] = float(corparam[2])
    cort[1,i] = float(corparam[3])
cort /= pscale
cor = np.array([0,0])
if gpin:
    cor = cort[:,0]

im_palila = shm_im.get_data()
(ysize,xsize) = im_palila.shape
mask = np.zeros_like(im_palila)
mask[ysize//2-a:ysize//2+a,xsize//2-a:xsize//2+a] = 1.
crop = shm_im.get_crop().astype(int)
#crop = np.array([128,128,160,160])
shiftx = pos[0,0]-crop[0]+320+cor[0]-0.5-x0/pscale
shifty = pos[0,1]-crop[2]+256+cor[1]-0.5-y0/pscale
# Try to find the center a first time, to check the flux
im_palila = shm_im.get_data().astype('float64')
im_palila *= mask
c0,timeout = find_center(im_palila, shiftx, shifty, timeout0, [0,0])
cnt = 0
cnt1 = 0
i = 0
nim = 10
time0 = time.time()+dtime
# loop
while True:
    try:
        while (cnt1 <= cnt):
            cnt1 = shm_im.get_counter()
        cnt = cnt1
        if i < nim:
            if i == 0:
                #print(read_shm().shape)
                im_palila = shm_im.get_data()/float(nim)
            else:
                im_palila += shm_im.get_data()/float(nim)
            i += 1
        else:
            i = 0
            im_palila -= dark_palila
            im_palila *= badpixmap_palila
            im_palila *= mask
            
            c0, timeout = find_center(im_palila, shiftx, shifty, timeout0, c0)
            sys.stdout.write('\r tip: %.4f, tilt: %.4f' % (c0[0], c0[1]))
            sys.stdout.flush()
            
            # Calculating and sending command to DM
            if timeout == 0:
                dmc += np.squeeze(c0[0]*modes[0,:,:]/0.1+c0[1]*modes[1,:,:]/0.1)
                #if np.max(dmc) < 1.:
                dm.set_data(dmc.astype(np.float32))
                time.sleep(0.001)
            else:
                sys.stdout.write('\r WAITING FOR FLUX %i s' % (timeout,))
                sys.stdout.flush()
                
            timeout0 = timeout
            if dtime > 0 and time.time() > time0:
                shm_im.close()
                shm_im_dark.close()
                shm_im_badpixmap.close()
                dm.close()
                sys.exit()
            
    except KeyboardInterrupt:
        print('KeyboardInterrupt caught')
        shm_im.close()
        shm_im_dark.close()
        shm_im_badpixmap.close()
        dm.close()
        
        sys.exit()
