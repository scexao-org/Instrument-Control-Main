#!/usr/bin/env python

# ============================================================= #
#              _                   _       _   _ _              #
#   /\  /\___ | |_ ___ _ __   ___ | |_    /_\ | (_) __ _ _ __   #
#  / /_/ / _ \| __/ __| '_ \ / _ \| __|  //_\\| | |/ _` | '_ \  #
# / __  / (_) | |_\__ \ |_) | (_) | |_  /  _  \ | | (_| | | | | #
# \/ /_/ \___/ \__|___/ .__/ \___/ \__| \_/ \_/_|_|\__, |_| |_| #
#                     |_|                          |___/        #
#                                                               #
# ============================================================= #

import os
import time
import sys
import pdb
import numpy as np
from astropy.io import fits as pf
import numpy.linalg as la
import asyncio
#from newfocus8742.usb import NewFocus8742USB as USB

from scxkw.config import REDIS_DB_HOST, REDIS_DB_PORT
from scxkw.redisutil.typed_db import Redis

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
from camera_tools import cam_cmd
from pyMilk.interfacing.isio_shmlib import SHM as shm
import image_processing as impro

shm_im = shm("palila")
shm_im_dark = shm("palila_dark")
shm_im_badpixmap = shm("palila_badpixmap")

# Reading in shared memory
#------------------------

def read_shm():
    im_palila = shm_im.get_data().astype('float32')
    dark_palila = shm_im_dark.get_data()
    badpixmap_palila = shm_im_badpixmap.get_data()
    im_palila -= dark_palila
    im_palila *= badpixmap_palila
    return im_palila

# ------------------------------------------------------------------
#  Read database for some stage status
# ------------------------------------------------------------------
def RDB_pull(rdb):

    fits_keys_to_pull = {'X_NULPKO','X_RCHPKO'}
    # Now Getting the keys
    with rdb.pipeline() as pipe:
        for key in fits_keys_to_pull:
            pipe.hget(key, 'FITS header')
            pipe.hget(key, 'value')
        values = pipe.execute()
    status = {k: v for k,v in zip(values[::2], values[1::2])}

    gpin = status['X_NULPKO'].strip() == 'IN'
    rpin = status['X_RCHPKO'].strip() == 'IN'

    return(gpin,rpin)

# Find center of image
#------------------------

def find_center(shiftx, shifty):
    for i in range(100):
        if i == 0:
            im_palila = read_shm()/100.
        else:
            im_palila += read_shm()/100.
    fmax = np.max(im_palila)
    fstd = np.std(im_palila)
    print(fmax, fstd, fmax/fstd)
    if fmax/fstd > 75:
        low_flux = False
        [cx,cy] = impro.centroid(im_palila,method="gaussian")
        cx -= shiftx
        cy -= shifty
    else:
        low_flux = True
        cx = cy = 0
    return [[cx, cy], low_flux]

# Main

#------------------------

# ------------------------------------------------------------------
#            Configure communication with SCExAO's redis
# ------------------------------------------------------------------
rdb = Redis(host=REDIS_DB_HOST, port=REDIS_DB_PORT)
# Is the server alive ?
try:
    alive = rdb.ping()
    if not alive:
        raise ConnectionError
except:
    print('Error: can\'t ping redis DB.')
    sys.exit(1)

gpin,rpin = RDB_pull(rdb)

os.system('cp %s/src/lib/python/%s_PSF_%s.fits %s/src/lib/python/simref.fits' %(home,"Palila","H",home))

# parameters of the target point
with open('/home/scexao/conf/palila_aux/hotspots.txt') as file:
    pos = np.array([[float(digit) for digit in line.split()] for line in file])

pscale = 15.3 #mas per pixel in Palila

filename = "/home/scexao/conf/palila_aux/hotspots_cor.txt"
cors = [line.rstrip('\n') for line in open(filename)]
ncor = len(cors)
cort = np.zeros((2,ncor))
for i in range(ncor):
    corparam = cors[i].split(';')
    cort[0,i] = float(corparam[2])
    cort[1,i] = float(corparam[3])
cort /= pscale
cor = np.array([0,0])
if gpin:
    cor = cort[:,0]

im_palila = read_shm()
(ysize,xsize) = im_palila.shape
crop = np.asarray(shm_im.get_crop()).astype(int)
#crop = np.array([128,128,160,160])
shiftx = pos[0,0]-crop[0]+320+cor[0]-0.5
shifty = pos[0,1]-crop[2]+256+cor[1]-0.5
# parameters of the loop
gain = 0.5
precision = 0.2

os.system("/home/scexao/bin/log Hotspotalign: starting alignment")
os.system("scexaostatus set hotspot 'IN PROGRESS' 3")

#reset the steering mirror
os.system("steering home")
time.sleep(1)
if rpin:
    os.system("steering reach")
else:
    os.system("steering onaxis")    
time.sleep(1)

A = np.matrix([[-1/100., 0],[0, 1/100.]])
invA = la.inv(A)

#initialize the position
cnt = 0
[c0,low_flux] = find_center(shiftx, shifty)
if low_flux:
    print("LOW FLUX, ABORTING ALIGNMENT")
    os.system("/home/scexao/bin/log Hotspotalign: aborting alignment")
    os.system("scexaostatus set hotspot 'LOW FLUX' 0")
    sys.exit(1)
else:
    print(c0)


cntmax = 20

# loop
while (((c0[0]**2+c0[1]**2)**0.5) > precision) and (cnt < cntmax) and not low_flux:
    cnt = cnt+1
    [c0,low_flux] = find_center(shiftx, shifty)
    if low_flux:
        print("LOW FLUX, ABORTING ALIGNMENT")
        os.system("/home/scexao/bin/log Hotspotalign: aborting alignment")
        os.system("scexaostatus set hotspot 'LOW FLUX' 0")
        sys.exit(1)
    else:
        print(c0)
        com = np.dot(invA, c0)
        com0x = int(round(com[0,0]*gain))
        com0y = int(round(com[0,1]*gain))
        os.system("dm_stage theta push %i" %com0x)
        os.system("dm_stage phi push %i" %com0y)

shm_im.close()

if cnt == cntmax:
    os.system("/home/scexao/bin/log Hotspotalign: aborting alignment ")
    os.system("scexaostatus set hotspot 'TOO MANY ITER.' 0")
else:
    os.system("/home/scexao/bin/log Hotspotalign: alignment done")
    os.system("scexaostatus set hotspot 'OFF' 1")
