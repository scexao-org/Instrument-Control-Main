#!/usr/bin/env python

# ========================================================= #
#       ______  ___    _        _         __  _             #
#      / __/  |/  /___(_)__    (_)__ ____/ /_(_)__  ___     #
#     _\ \/ /|_/ /___/ / _ \  / / -_) __/ __/ / _ \/ _ \    #
#    /___/_/  /_/   /_/_//_/_/ /\__/\__/\__/_/\___/_//_/    #
#                         |___/                             #
# ========================================================= #

import sys
import os
import time
import pdb



home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import zaber_chain
import ezstep_chain
import logit #Custom logging library

zabdev  = "/dev/serial/by-path/"
zabdev += "pci-0000:00:1d.0-usb-0:1.2.4.4.4.2:1.0-port0"

ttmdev  = "/dev/serial/by-path/"
ttmdev += "pci-0000:00:1d.0-usb-0:1.2.4.4.4.4:1.0-port0" # all steppers

stagename = "smi"

def usage():
    print """---------------------------------------
Usage: smi <dev> <command> <arg>
---------------------------------------
dev:\n---
    x          horizontal axis
    y          vertical axis 
    f          along the optical axis
    car        carriage 
    pl         moves to PL
command:\n-------
    status     displays camera status
    home       sends the camera home
    goto       moves camera to position:
               numerical value 
    knobon     re-activates the knob
    knoboff    de-activates the knob
    in         moves dichroic in
    reset      home, then come back\n
arg:\n---
    numerical value (zaber steps)
examples:\n--------
   smi x status
   smi y goto 50000
   smi f home
   smi reset
--------------------------------------- """
    sys.exit()

def quickhelp():
    print "%20s       Focusing stage for Chuck and Saphira" % (stagename,)

# =====================================================================
# =====================================================================
def main():
    args = sys.argv[1:]  # list of read arguments
    na = args.__len__()  # number of arguments
    quiet = True

    if args == []: usage()

    elif "--help1" in args[0].lower():
        quickhelp()

    elif "reset" in args[0].lower():
        # re-init the stepper parameters
        ttm = ezstep_chain.ezstep_chain(ttmdev)
        ttm.init_smi(quiet=False)
        time.sleep(2)
        ttm.close()        
        sys.exit()

    # what dof are we actuating?
    elif "x" in args[0].lower():
        idn = 9
    elif "y" in args[0].lower():
        idn = 12
    elif "f" in args[0].lower():
        idn = 11
    elif "car" in args[0].lower():
        idn=3

    else:
        usage()
    
    if ("x" in args[0].lower()) or ("y" in args[0].lower()) or ("f" in args[0].lower()) or ("car" in args[0].lower()):
        if na < 2: # safety
            usage()

        if "home" in args[1].lower():
            if idn!=3:
                zab = zaber_chain.zaber_chain(zabdev, quiet=quiet)
                zab.home(idn)
                zab.close()
                if idn == 9:
                    logit.logit('SMI_x_axis','moved_to_position_0')
                elif idn == 12:
                    logit.logit('SMI_y_axis','moved_to_position_0')
                elif idn == 8:
                    logit.logit('SMI_f_axis','moved_to_position_0')
                else:
                    logit.logit('SMI_d_axis','moved_to_position_0')
            else:
                ttm = ezstep_chain.ezstep_chain(ttmdev)
                position = ttm.home(idn)
                ttm.close()
            
        elif "stat" in args[1].lower():
            if idn!=3:
                zab = zaber_chain.zaber_chain(zabdev, quiet=quiet)
                position = zab.status(idn, quiet=quiet)
                zab.close()
                print("Axis %s (idn=%d): pos = %d" % (args[0], idn, position))
            else:
                ttm = ezstep_chain.ezstep_chain(ttmdev)
                position = ttm.current_pos(idn)
                ttm.close()
                print 'hello'
                print position
                #print("Axis %s (idn=%d): pos = %d" % (args[0], idn, position))
            
        elif "goto" in args[1].lower():
            if na < 3: # safety
                usage()
                
            if idn!=3:    
                try:
                    pos = int(args[2])
                except:
                    usage()
                
                zab = zaber_chain.zaber_chain(zabdev, quiet=quiet)
                zab.move(idn, pos, relative=False)
                zab.close()
                if idn == 9:
                    logit.logit('SMI_x_axis','moved_to_position_'+str(pos))
                elif idn == 12:
                    logit.logit('SMI_y_axis','moved_to_position_'+str(pos))
                elif idn == 8:
                    logit.logit('SMI_f_axis','moved_to_position_'+str(pos))
                else:
                    logit.logit('SMI_d_axis','moved_to_position_'+str(pos))
            else:
                try:
                    pos = int(args[2])
                except:
                    usage()
                    
                if (0<= pos <= 11500000):
                    print("requested position = %d" % (pos,))
                    ttm = ezstep_chain.ezstep_chain(ttmdev)
                    ttm.goto(idn, pos)#4
                    ttm.close()
                    logit.logit('SMI_car_axis','moved_to_position_'+str(pos))
                else:
                    usage()
        else:
            usage()

if __name__ == "__main__":
    main()

    # these lines are here for quick debugging purposes
    # -------------------------------------------------
    #zab = zaber_chain.zaber_chain(zabdev, quiet=True)
