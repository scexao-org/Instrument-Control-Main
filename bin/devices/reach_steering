#!/usr/bin/env python

# --------------------------------------------------------------- #
#    __    __  _      ___          _____                     _    #
#   /__\  /__\/_\    / __\ /\  /\ /__   \__ _ _ __ __ _  ___| |_  #
#  / \// /_\ //_\\  / /   / /_/ /   / /\/ _` | '__/ _` |/ _ \ __| #
# / _  \//__/  _  \/ /___/ __  /   / / | (_| | | | (_| |  __/ |_  #
# \/ \_/\__/\_/ \_/\____/\/ /_/    \/   \__,_|_|  \__, |\___|\__| #
#                                                 |___/           #
#  _____                _    _                                    #
# /__   \_ __ __ _  ___| | _(_)_ __   __ _                        #
#   / /\/ '__/ _` |/ __| |/ / | '_ \ / _` |                       #
#  / /  | | | (_| | (__|   <| | | | | (_| |                       #
#  \/   |_|  \__,_|\___|_|\_\_|_| |_|\__, |                       #
#                                    |___/                        #
#                                                                 #
# --------------------------------------------------------------- #

import numpy as np
import os,sys,time
import matplotlib.pyplot as plt
import math as m

from scxkw.config import REDIS_DB_HOST, REDIS_DB_PORT
from scxkw.redisutil.typed_db import Redis


plt.ion()

def RDB_pull(rdb):

    fits_keys_to_pull = {'D_IMRPAD'}
    # Now Getting the keys
    with rdb.pipeline() as pipe:
        for key in fits_keys_to_pull:
            pipe.hget(key, 'FITS header')
            pipe.hget(key, 'value')
        values = pipe.execute()
    status = {k: v for k,v in zip(values[::2], values[1::2])}

    pad = float(status['D_IMRPAD'])

    return(pad)

hmsg = """
-------- PCFI target tracking ---------

Usage: reach_track <separation> <PA>

INPUT <separation> : Separation between star and target (in arcsec)
INPUT <PA>         : Position angle in degrees (0deg: North, 90deg: East)
EXAMPLE :  pcfi_track 0.2 135 

for any questions, ask Julien Lozi (lozi@naoj.org).
"""

# ------------------------------------------------------------------
#            Configure communication with SCExAO's redis
# ------------------------------------------------------------------
rdb = Redis(host=REDIS_DB_HOST, port=REDIS_DB_PORT)
# Is the server alive ?
try:
    alive = rdb.ping()
    if not alive:
        raise ConnectionError
except:
    print('Error: can\'t ping redis DB.')
    sys.exit(1)

args = sys.argv[1:]

if args != []:
    if args[0] == "onaxis":
        os.system("reach_oap onaxis")
        sys.exit()
    elif args[0] == "chuckxy":
        try:
            posx = float(args[1])
            posy = float(args[2])
        except:
            print(hmsg)
            sys.exit()
    elif args[0] == "skyangle":
        try:
            dist = float(args[1])
            angle = float(args[2])
            pad = RDB_pull(rdb)
            print(pad % 360)
        except:
            print(hmsg)
            sys.exit()
        posx = -dist*m.cos(m.radians(angle-pad))
        posy = -dist*m.sin(m.radians(angle-pad))
    else:
        print(hmsg)
        sys.exit()
    try:
        theta0 = float(args[3])
        phi0 = float(args[4])
    except:
        oap_file = "/home/scexao/bin/devices/conf/conf_reach_oap.txt"
        with open(oap_file,'r') as f:
            f2 = [float(s) for s in f.readlines()[0].split(';')[2:4]]
        f.close()
        theta0 = f2[0]
        phi0 = f2[1]
else:
    print(hmsg)
    sys.exit()

# ------------------------------------------------------------------
#             files and shared memory
# ------------------------------------------------------------------

dist_file = "/home/scexao/bin/devices/conf/distortion_reach.txt"

dist = []
with open(dist_file) as f:
    for line in f.readlines():
        dist.append([float(s) for s in line[:-1].split(';')[1:]])
ptheta1 = np.array(dist[0])
pphi1 = np.array(dist[1])

ind = np.array([[0,0],[1,0],[2,0],[3,0],[4,0],[0,1],[0,2],[0,3],[0,4],[1,1],[1,2],[1,3],[2,1],[2,2],[3,1]])
ptheta2 = np.zeros((5,5))
pphi2 = np.zeros((5,5))
for i in range(len(ptheta1)):
    ptheta2[ind[i,0],ind[i,1]] = ptheta1[i]
    pphi2[ind[i,0],ind[i,1]] = pphi1[i]

thetat = np.polynomial.polynomial.polyval2d(posx,posy,ptheta2)
phit = np.polynomial.polynomial.polyval2d(posx,posy,pphi2)
print(posx,posy)
print(theta0+thetat, phi0+phit)
print(thetat, phit)

os.system("reach_oap theta goto %f" % (theta0+thetat))
os.system("reach_oap phi goto %f" % (phi0+phit))
