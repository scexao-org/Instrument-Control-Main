#############################################################################
# Configuration for OCS Gen 2 back ends
#############################################################################
#
#[ Eric Jeschke (eric@naoj.org) --
#]

import os, time
from Bunch import Bunch
from cfg.INS import INSdata
import remoteObjects as ro

# For errors generated by configuration
class Error(Exception):
    pass


gen2home = ('%s/Svn/python/Gen2' % os.environ['HOME'])
try:
    gen2home = os.environ['GEN2HOME']

except KeyError:
    # What should we do here?
    #raise Error("GEN2HOME environment variable is undefined")
    pass

# For getting instrument information
ins_data = INSdata()

#############################################################################
# Log files configuration
#############################################################################
def logdir():
    try:
        logdir = os.environ['LOGHOME']

    except KeyError:
        try:
            logdir = ('%s/Logs' % os.environ['GEN2HOME'])

        except KeyError:
            raise Error("LOGHOME and GEN2HOME env vars are undefined")

    return logdir

def get_logdir(logfile):
    """Used by OSSO_IntegLogReader.py to read log files in IntegGUI.
    Returns directory where a particular log file is stored.
    """
    # Right now almost all logs of interest are stored in one place!
    return logdir()
    
def get_log(logfile, args=None):
    if args:
        logfile = logfile % args
    return os.path.join(logdir(), logfile)

def get_logs(config):
    """Returns a list of tuples of all log files found in _config_"""
    res = []
    for (svcname, d) in config.svconfig.items():
        if d.has_key('stdout'):
            res.append((svcname, d['hosts'], d['stdout']))

    return res


#############################################################################
# Star catalog DB configuration
#############################################################################
def starcatdir():
    try:
        starcatdir = os.path.join(os.environ['GEN2COMMON'], 'starcat')

    except KeyError:
        starcatdir = '/gen2/data/starcat'     
   
    return starcatdir


#############################################################################
# Data area configuration
#############################################################################
def datadir(inst):
    try:
        datadir = os.environ['DATAHOME']

    except KeyError:
        try:
            datadir = ('%s/Data/%s' % (os.environ['GEN2HOME'], inst))

        except KeyError:
            raise Error("DATAHOME and GEN2HOME env vars are undefined")

    return datadir + ('/%s' % inst.upper())


#############################################################################
# Db area configuration
#############################################################################
def dbdir():
    try:
        dbdir = os.environ['GEN2COMMON'] + '/db'

    except KeyError:
        try:
            dbdir = ('%s/Data' % (os.environ['GEN2HOME']))

        except KeyError:
            raise Error("GEN2COMMON and GEN2HOME env vars are undefined")

    return dbdir

def get_key(name):
    try:
        return os.environ['GEN2COMMON'] + '/keys/' + name + '.key'
    except KeyError:
        raise Error("GEN2COMMON env vars are undefined")

#############################################################################
# Help functions
#############################################################################

def left(hosts):
    return hosts[0]

def right(hosts):
    return hosts[-1]

def mid(hosts):
    return hosts[int(len(hosts)/2)]

def host(conf, key):
    return conf.managers[key].host

def hosts(conf, keys):
    return [host(conf, key) for key in keys]

def prefer(pref_keys, keys):
    preferred = set(pref_keys)
    rest = set(keys) - preferred
    return list(preferred) + list(rest)

def populate(**hostbnches):
    def _pop(hostbnch):
        ro.populate_host(hostbnch, def_user=os.environ['LOGNAME'],
                         def_port=ro.managerServicePort)
    map(_pop, hostbnches.values())
    return hostbnches

def get_floaters(hostbnches):
    """Map floating interface names to generic node names."""
    res = Bunch()
    for key in hostbnches.keys():
        try:
            alt_ifcs = hostbnches[key]['alt']
            for name in alt_ifcs:
                res[name] = key
        except KeyError:
            continue
    return res

def screen(disp):
    return ':'+disp.split(':')[1]
    #return ':20'

def get_disp(conf):
    def func(pos):
        disp_host = host(conf, conf.svconfig['vncs-'+pos]['hosts'][0])
        disp_num = screen(conf.disp[pos])
        return disp_host + disp_num

    return func

def calc_future(time_inc, **kwdargs):

    def docalc(bm, svcinfo):
        # Get current time plus increment
        (yr, mo, day, hr, min, sec, wday, yday, isdst) = time.localtime(
            time.time() + time_inc)
        # override select values
        d = { 'yr': yr, 'mo': mo, 'day': day, 'hr': hr, 'min': min,
              'sec': sec, 'wday': wday, 'yday': yday, 'isdst': isdst }
        d.update(kwdargs)
        
        # return future time to run job
        next_time = time.mktime((d['yr'], d['mo'], d['day'], d['hr'], d['min'],
                                 d['sec'], -1, -1, -1))
        svcinfo['time_next'] = next_time

    return docalc
            
def calc_cron(hr='*', min='*', mon='*', day='*', wday='*'):

    cron = Bunch(hr=hr, min=min, mon=mon, day=day, wday=wday)
    
    def docalc(bm, svcinfo):
        # Get current time
        (yr, mon, day, hr, min, sec, wday, yday, isdst) = time.localtime(
            time.time())

        if cron.mon != '*':
            if not (mon in cron.mon):
                return
        if cron.day != '*':
            if not (day in cron.day):
                return
        if cron.wday != '*':
            if not (wday in cron.wday):
                return
        if cron.hr != '*':
            if not (hr in cron.hr):
                return
        if cron.min != '*':
            if not (min in cron.min):
                return

        # Don't run the same cron job if less than 60 seconds have expired
        cur_time = time.time()
        if svcinfo.has_key('time_last') and (
            cur_time - svcinfo['time_last'] < 60.0):
            return

        svcinfo['time_last'] = cur_time
        svcinfo['time_next'] = cur_time
        
    return docalc
            
#############################################################################
# Descriptions
#############################################################################
DESCR = Bunch()
DESCR.mgrsvc = """The Manager Service is the root service that starts,
stops and monitors other services."""

DESCR.names = """The Name Service provides a directory for looking up
services in a network independent way."""

DESCR.monitor = """The Monitor service provides a publish/subscribe type
information service.  It is used by many of the other services to report
and monitor various events in the system."""


DESCR.status = """The Status service provides a fetch/store/derive
repository for OCS status keys and their values."""

DESCR.bootmgr = """The Boot Manager service provides a user friendly front-end
to the Manager Service."""

DESCR.sessions = """The Session Manager service keeps track of individual
sessions on the OCS.  It controls allocations, registration of propid, users,
etc."""

DESCR.alarm_handler = """The Alarm Handler service monitors the
incoming TSC feed, reports alarm conditions, and updates STS.* status
aliases that are monitored by STS (Subaru Telemetry System)."""

DESCR.taskmgr = """The Task Manager service provides an environment to run
OCS tasks.  Observation activities are carried out by executing tasks in the
Task Manager."""

DESCR.archiver = """The Archiver service takes note of when FITS frames are
allocated or received and notifies various entities that are concerned with
frame handling, such as IntegGUI, FITS viewers, the STARS interface, etc."""

DESCR.frames = """The Frame service allocates FITS frame numbers."""

DESCR.INSint = """This is an OCS interface to the named instrument."""

DESCR.SIMCAM = """This is an instrument OBCP or instrument simulator."""

DESCR.STARSint = """This is an OCS interface to the STARS archive system."""

DESCR.statint = """This is an OCS interface to the legacy status system."""

DESCR.STARSsim = """This is a STARS simulator."""

DESCR.TSC0 = """This is the real telescope interface.  USE WITH CARE!"""

DESCR.TSC = """This is a simulated telescope interface."""

DESCR.statussim = """This is a program to pull status from SOSS and feed
it to Gen2.  It is used to simulate a status feed from the telescope."""

DESCR.starcat = """This is the star catalog.  It is used to look up guide
stars."""

DESCR.dssserver = """This is they Digital Sky Survey server.  It is used to
provide background images for guide star selection."""

DESCR.ut1_utc = """This periodic job fetches UT1_UTC time correction
table data over the internet."""

#END
