#!/usr/bin/env python


# ------------------------------------------------------- #
#    ___  ___   ________   _____                     _    #
#   / _ \/ __\ / __\_   \ /__   \__ _ _ __ __ _  ___| |_  #
#  / /_)/ /   / _\  / /\/   / /\/ _` | '__/ _` |/ _ \ __| #
# / ___/ /___/ / /\/ /_    / / | (_| | | | (_| |  __/ |_  #
# \/   \____/\/  \____/    \/   \__,_|_|  \__, |\___|\__| #
#                                         |___/           #
#  _____                _    _                            #
# /__   \_ __ __ _  ___| | _(_)_ __   __ _                #
#   / /\/ '__/ _` |/ __| |/ / | '_ \ / _` |               #
#  / /  | | | (_| | (__|   <| | | | | (_| |               #
#  \/   |_|  \__,_|\___|_|\_\_|_| |_|\__, |               #
#                                    |___/                #
#                                                         #
# ------------------------------------------------------- #

import numpy as np
import os,sys,time
import matplotlib.pyplot as plt
import math as m
from xaosim.scexao_shmlib import shm

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import image_processing as impro
import vibration as vib

plt.ion()

hmsg = """
-------- PCFI target tracking ---------

Usage: pcfi_track <separation> <PA> <fiber_type>

INPUT <separation> : Separation between star and target
INPUT <PA>         : Position angle in degrees (0deg: North, 90deg: East)
INPUT <fiber_type> : (OPTIONAL)  fiber injection type ("mmf" or "smf" (default))
EXAMPLE :  pcfi_track 0.2 135 

for any questions, ask Julien Lozi (lozi@naoj.org).
"""

args = sys.argv[1:]
speed = 1.
pad0 = 0

if len(args) == 1:
    try:
        speed = float(args[0])
    except:
        print(hmsg)
elif len(args) == 2:
        speed = float(args[0])
        pad0 = float(args[1])
elif len(args) >2:
    print(hmsg)

# ------------------------------------------------------------------
#             files and shared memory
# ------------------------------------------------------------------

telescope_status = shm("/tmp/telescope_status.im.shm", verbose=False)

ts = np.zeros((6,1))
ts[5] = -39.
i = 0

while True:
    pad = pad0+speed*i
    pad %= 360.
    ts[4] = pad
    telescope_status.set_data(ts.astype(np.float32))
    time.sleep(10)
    i += 1
    
