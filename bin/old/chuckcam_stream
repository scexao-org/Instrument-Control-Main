#!/usr/bin/env python

# -------------------------------------------------- #
#    ___ _                _      ___                 #
#   / __\ |__  _   _  ___| | __ / __\__ _ _ __ ___   #
#  / /  | '_ \| | | |/ __| |/ // /  / _` | '_ ` _ \  #
# / /___| | | | |_| | (__|   </ /__| (_| | | | | | | #
# \____/|_| |_|\__,_|\___|_|\_\____/\__,_|_| |_| |_| #
#  __ _                                              #
# / _\ |_ _ __ ___  __ _ _ __ ___                    #
# \ \| __| '__/ _ \/ _` | '_ ` _ \                   #
# _\ \ |_| | |  __/ (_| | | | | | |                  #
# \__/\__|_|  \___|\__,_|_| |_| |_|                  #
#                                                    #
# -------------------------------------------------- #
import sys
import numpy as np
import matplotlib.cm as cm
import struct 
import os
import Image
import time
import math as m
import copy
import datetime as dt
import pyfits as pf

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
from   camera_tools import cam_cmd
from   scexao_shm   import shm
import wheel

args = sys.argv[1:]
zoom = 2    # zoom for the display (default is 2)
if args != []:
    if isinstance(int(args[0]),int):
        zoom = int(args[0])
        zoom = min(3,max(1,zoom))

# ------------------------------------------------------------------
#                access to shared memory structures
# ------------------------------------------------------------------
camid = 1#2 # camera identifier (1: science camera)
cam = shm("/tmp/ircam%d.im.shm" % (camid,))

cam_cmd("tecon %d" % (camid,)) # start TEC

# ------------------------------------------------------------------
#                       global variables
# ------------------------------------------------------------------

mycmap = cm.gray
(xsize, ysize) = cam.size[:cam.naxis]

os.system("tmux new-session -d -s ircam1") #start a tmux session for messsages

# ------------------------------------------------------------------
#             short hands for shared memory data access
# ------------------------------------------------------------------
def get_img_data(check=False):
    ''' ----------------------------------------
    Return the current image data content,
    formatted as a 2D numpy array.
    Reads from the already-opened shared memory
    data structure.
    ---------------------------------------- '''
    return(cam.get_data(check, True).astype(float))

# ------------------------------------------------------------------
#  another short hand to convert numpy array into image for display
# ------------------------------------------------------------------
def arr2im(arr, vmin=0., vmax=10000.0, pwr=1.0):
    
    if  zoom2 != 1:
        arr2 = arr[xsize/2*(1-1./zoom2):xsize/2*(1+1./zoom2),ysize/2*(1-1./zoom2):ysize/2*(1+1./zoom2)]
    else:
        arr2 = arr
    arr3 = arr2.astype('float')**pwr
    mmin,mmax = arr3.min(), arr3.max()
    arr3 -= mmin
    if mmin < mmax:
        arr3 /= (mmax-mmin)

    if zoom != 1 or zoom2 != 1:
        img = Image.fromarray(arr3)
        rimg = img.resize((zoom*ysize, zoom*xsize))
        rarr = np.asarray(rimg)
        test = mycmap(rarr)
    else:
        test = mycmap(arr3)
    return((255*test[:,:,:3]).astype('int'))

# ------------------------------------------------------------------
#  find center of the image
# ------------------------------------------------------------------
def find_center(image,bias,subt_bias):
    if not subt_bias:
        image2 = image-bias
    else:
        image2 = copy.deepcopy(image)
    imin = np.percentile(image2, 99.85)
    image2 -= imin
    mask = image2 > 0
    image2 *= mask
    total = np.nansum(image2)
    X, Y = np.indices(np.shape(image2))
    cx = (np.nansum(Y*image2)/total)
    cy = (np.nansum(X*image2)/total)
    cx += 0.5
    cy += 0.5
    return [cx, cy]

# ------------------------------------------------------------------
#              !!! now we are in business !!!!
# ------------------------------------------------------------------

WHITE = (255, 255, 255)
GREEN = (147, 181,  44) 
BLUE  = (  0,   0, 255)
RED1   = (255,   0,   0)
RED   = (246, 133, 101) #(185,  95, 196)
BLK   = (  0,   0,   0)
CYAN  = (0, 255, 255)

FGCOL = WHITE  # foreground color (text)
SACOL = RED1   # saturation color (text)
BGCOL = BLK    # background color
BTCOL = BLUE   # *button* color

background = pygame.Surface(screen.get_size())
background = background.convert()

#etimes = np.array([1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000,
#                   5000, 10000, 20000,50001, 100002, 200004, 300006,
#                   400008, 500010])
etimes = np.array([1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000,
                   5000, 10000, 16000, 24000, 37000, 57000, 89000,
                   140000, 210000, 330000, 510000])

net = np.size(etimes)

# get initial exposure time value
etime = int(cam.get_expt())
# and the closest matching value in our etimes array
if etime <= etimes[-1]:
    tindex = np.where(etimes >= etime)[0][0]
else:
    tindex = np.where(etimes == etimes[-1])[0][0]

# ----------------------------
#          labels
# ----------------------------
font1 = pygame.font.SysFont("default",   20*zoom)
font2 = pygame.font.SysFont("default",   14*zoom)
font3 = pygame.font.SysFont("monospace", 5*(zoom+1))
font4 = pygame.font.SysFont("monospace", 7+3*zoom)
font5 = pygame.font.SysFont("monospace", 7+3*zoom)
font5.set_bold(True)

path_cartoon = "/home/scexao/conf/chuckcam_aux/Chuck%d.png" % (zoom,)
cartoon1 = pygame.image.load(path_cartoon).convert_alpha()

lbl = font1.render("SCIENCE camera viewer", True, WHITE, BGCOL)
rct = lbl.get_rect()
rct.center = (110*zoom, 270*zoom)
screen.blit(lbl, rct)

lbl2 = font1.render("Press [h] for help", True, WHITE, BGCOL)
rct2 = lbl2.get_rect()
rct2.center = (110*zoom, 285*zoom)
screen.blit(lbl2, rct2)

lbl3 = font2.render("Because Chuck always helps the weak", True, WHITE, BGCOL)
rct3 = lbl3.get_rect()
rct3.center = (110*zoom, 300*zoom)
screen.blit(lbl3, rct3)

imin, imax = 0, 0
msg = "t = %3d us (min,max) = (%5d,%5d)" % (etime, imin, imax)
info = font3.render(msg, True, FGCOL, BGCOL)
rct_info  = info.get_rect()
rct_info.center = (110*zoom, 315*zoom)

xmou, ymou, fmou = 0, 0, 0
msg2 = " mouse = (%3d,%3d), flux = %5d" % (xmou, ymou, fmou)
info2 = font3.render(msg2, True, FGCOL, BGCOL)
rct_info2  = info2.get_rect()
rct_info2.center = (110*zoom, 325*zoom)

msgli = " "
mli = font4.render(msgli, True, CYAN)
rct_mli  = mli.get_rect()
rct_mli.center = (xmou, ymou)

dinfo = font3.render("                     ", True, FGCOL, BGCOL)
rct_dinfo  = dinfo.get_rect()
rct_dinfo.center = (110*zoom, 335*zoom)
screen.blit(dinfo, rct_dinfo)

dinfo2 = font3.render("                          ", True, FGCOL, BGCOL)
rct_dinfo2  = dinfo2.get_rect()
rct_dinfo2.center = (110*zoom, 345*zoom)
screen.blit(dinfo2, rct_dinfo2)

xws = xsize*zoom
yws = ysize*zoom

msgsave1 = "saving images"
msgsave2 = "  before I   "
msgsave3 = "kick your ass"
savem1 = font5.render(msgsave1, True, RED1)
savem2 = font5.render(msgsave2, True, RED1)
savem3 = font5.render(msgsave3, True, RED1)
rct_savem1 = savem1.get_rect()
rct_savem2 = savem2.get_rect()
rct_savem3 = savem3.get_rect()
h_savem2 = savem2.get_height()
h_savem3 = savem3.get_height()
rct_savem1.bottomright = (xws-10*zoom, yws-h_savem2-h_savem3)
rct_savem2.bottomright = (xws-10*zoom, yws-h_savem3)
rct_savem3.bottomright = (xws-10*zoom, yws)

cx = xsize/2.
cy = ysize/2.

#bullseye size
bc = 2+4*zoom
bl = 2*bc

#scale
ktot = 500/12.1*zoom
kstep = np.zeros(5)
for k in range(5):
    kstep[k] = (k+1)*100/12.1*zoom
ksize = np.array([1,1,1,1,2])*(1+zoom)
xsc = 10*zoom
ysc = 246*zoom
msgsc1 = "0.5\""
sc1 = font4.render(msgsc1, True, CYAN)
rct_sc1  = sc1.get_rect()
rct_sc1.center = (xsc+ktot+2*zoom+3, ysc+5*zoom)
sc2 = font4.render(msgsc1, True, CYAN)
rct_sc2  = sc2.get_rect()
rct_sc2.bottomleft = (5*zoom-4, ysc-ktot)

#zoom
zoom2 = 1
iz = 0
zooms2 = [1, 2, 4]
msgzm = "  "
zm = font1.render(msgzm, True, CYAN)
rct_zm  = zm.get_rect()
rct_zm.topleft = (5*zoom, 5*zoom)

imin, imax = 0, 0
surf_live = pygame.surface.Surface((xws, yws))

rect1 = surf_live.get_rect()
rect1.topleft = (0, 0)

rect2 = cartoon1.get_rect()
rect2.bottomright = XW, YW+10*zoom
screen.blit(cartoon1,  rect2)


plot_cross   = True  # flag for display of the crosses
plot_hotspot = False # flag for display of the hotspot
subt_bias    = False # flag for bias subtraction
subt_ref     = False # flag for ref subtraction
cont_acq     = False 
lin_scale    = True  # flag for linear range
clr_scale    = False # flag for the display color scale
average      = False # flag for averaging
saveim       = False # flag to save images
logexpt      = False # flag to log the exposure time

bias = np.zeros((ysize,xsize))
ref_im = np.zeros((ysize,xsize))

badpixmap = 1-pf.getdata(home+"/conf/chuckcam_aux/badpixmap.fits")

pygame.mouse.set_cursor(*pygame.cursors.broken_x)
pygame.display.update()

cntl = 0
cnta = 0
timeexpt = []

# =======================================================
# =======================================================
while True: # the main game loop
    clicked = False
    pwr0 = 1.0
    if not lin_scale:
        pwr0 = 0.3

    mycmap = cm.gray
    if clr_scale:
        mycmap = cm.jet
    
    # read exposure time changes
    if cam.get_expt() != etime:
        etime = cam.get_expt()
        bname = home+"/conf/chuckcam_aux/bias%07d.fits" % (etime,)
        bias = pf.getdata(bname)
        tindex = np.where(etimes >= etime)[0][0]

    # read image
    temp = get_img_data()
    temp *= badpixmap
    isat = np.percentile(temp[1:-1,1:-1], 99.995)
    if subt_bias:
        temp -= bias
    if average == True:
        cnta += 1
        if cnta == 1:
            temp2 = copy.deepcopy(temp)
        else:
            temp2 *= float(cnta)/float(cnta+1)
            temp2 += temp/float(cnta+1)
    else:
        temp2 = copy.deepcopy(temp)
        cnta = 0
    imax = np.max(temp2)
    imin = np.percentile(temp2, 0.5)
    temp2b = temp2-imin
    temp2b *= temp2b>0
    if subt_ref:
        if lin_scale:
            if subt_bias:
                myim = arr2im((temp2b-ref_im+bias).transpose(), pwr=pwr0)
            else:
                myim = arr2im((temp2b-ref_im).transpose(), pwr=pwr0)
        else:
            if subt_bias:
                myim = arr2im((np.abs(temp2b-ref_im+bias)).transpose(), pwr=pwr0)
            else:
                myim = arr2im((np.abs(temp2b-ref_im)).transpose(), pwr=pwr0)
    else:
        myim = arr2im(temp2b.transpose(), pwr=pwr0)
    pygame.surfarray.blit_array(surf_live, myim)
    screen.blit(surf_live, rect1)
    
    if etime < 1e3:
        msg = "t = %3d us (min,max) = (%5d,%5d)" % (etime, imin, imax)
    elif etime >= 1e3 and etime < 1e6:
        msg = "t = %3d ms (min,max) = (%5d,%5d)" % (etime/1e3, imin, imax)
    else:
        msg = "t = %3d s  (min,max) = (%5d,%5d)" % (etime/1e6, imin, imax)
    
    info = font3.render(msg, True, FGCOL, BGCOL)
    screen.blit(info, rct_info)

    # display the bullseye on the PSF
    if plot_hotspot:
        [cx,cy] = find_center(temp2, bias, subt_bias)
        if (cx >= 0) and (cx < 320) and (cy >= 0) and (cy < 256):
            fh = temp2[int(cy), int(cx)]
            msg2 = "center = (%3d,%3d), flux = %5d" % (cx, cy, fh)
            info2 = font3.render(msg2, True, FGCOL, BGCOL)
            screen.blit(info2, rct_info2)
        cx = xsize/2*zoom+(cx-xsize/2)*zoom*zoom2
        cy = ysize/2*zoom+(cy-ysize/2)*zoom*zoom2
        pygame.draw.line(screen, RED1, (cx-bl*zoom2, cy), (cx+bl*zoom2, cy), 1)
        pygame.draw.line(screen, RED1, (cx,cy-bl*zoom2), (cx, cy+bl*zoom2), 1)
        pygame.draw.circle(screen, RED1, (int(cx),int(cy)), bc*zoom2, 1)
    else:
        # display mouse information
        [xmou, ymou] = pygame.mouse.get_pos()
        xim = xsize/2*(1-1./zoom2)+xmou/zoom/zoom2
        yim = ysize/2*(1-1./zoom2)+ymou/zoom/zoom2
        if (xim >= xsize/2*(1-1./zoom2)) and (xim < xsize/2*(1+1./zoom2)) and (yim >= ysize/2*(1-1./zoom2)) and (yim < ysize/2*(1+1./zoom2)):
            fim = temp2[yim, xim]
            msg2 = " mouse = (%3d,%3d), flux = %5d" % (xim, yim, fim)
            info2 = font3.render(msg2, True, FGCOL, BGCOL)
            screen.blit(info2, rct_info2)
    
    # display information
    if lin_scale:
        msg = "    linear // "
    else:
        msg = "non-linear // "
    if subt_bias:
        msg += "   bias"
    else:
        msg += "no-bias"
    dinfo = font3.render(msg, True, FGCOL, BGCOL)
    screen.blit(dinfo, rct_dinfo)

    if isat > 15000:
        msg = "     !!!SATURATION!!!     "
        dinfo2 = font3.render(msg, True, BGCOL, SACOL)
        screen.blit(dinfo2, rct_dinfo2)
    elif isat > 11000 and isat <=15000:
        msg = "     !!!NON-LINEAR!!!     "
        dinfo2 = font3.render(msg, True, SACOL, BGCOL)
        screen.blit(dinfo2, rct_dinfo2)
    else:
        msg = "                          "
        dinfo2 = font3.render(msg, True, SACOL, BGCOL)
        screen.blit(dinfo2, rct_dinfo2)

    # display the scale
    pygame.draw.line(screen, CYAN, (xsc,ysc), (xsc+ktot*zoom2,ysc))
    pygame.draw.line(screen, CYAN, (xsc,ysc), (xsc,ysc-ktot*zoom2))
    for k in range(5):
        pygame.draw.line(screen, CYAN, (xsc,ysc-kstep[k]*zoom2), (xsc+ksize[k],ysc-kstep[k]*zoom2))
        pygame.draw.line(screen, CYAN, (xsc+kstep[k]*zoom2,ysc), (xsc+kstep[k]*zoom2,ysc-ksize[k]))
    rct_sc1.center = (xsc+ktot*zoom2+2*zoom+3, ysc+5*zoom)
    screen.blit(sc1, rct_sc1)
    rct_sc2.bottomleft = (5*zoom-4, ysc-ktot*zoom2)
    screen.blit(sc2, rct_sc2)
    screen.blit(zm, rct_zm)
    
    # display the cross
    if plot_cross:
        #Pupil cross for summit
        pygame.draw.line(screen, GREEN, 
                         (0, yws/2-7.5*zoom*zoom2), (xws, yws/2-7.5*zoom*zoom2), 1)
        pygame.draw.line(screen, GREEN, 
                         (xws/2+23*zoom*zoom2,0), (xws/2+23*zoom*zoom2,yws), 1)
        #Focus cross
        pygame.draw.line(screen, RED, (0, yws/2+zoom*zoom2), (xws, yws/2+zoom*zoom2), 1)
        pygame.draw.line(screen, RED, (xws/2-0.5*zoom*zoom2, 0), (xws/2-0.5*zoom*zoom2, yws), 1)
        
    # measure distances
    if pygame.mouse.get_pressed()[0]:
        if (xim >= 0) and (xim < 320) and (yim >= 0) and (yim < 256):
            if cntl == 0:
                xl1 = xmou
                yl1 = ymou
            else:
                pygame.draw.line(screen, RED1, (xl1,yl1), (xmou,ymou))
                dist = m.sqrt((xmou-xl1)**2+(ymou-yl1)**2)*12.1/zoom/zoom2
                msgli = "%.1f mas" % (dist,)
                mli = font4.render(msgli, True, CYAN)
                rct_mli  = mli.get_rect()
                if xmou < 246:
                    rct_mli.midleft = (xmou+5+5*zoom, ymou)
                else:
                    rct_mli.midright = (xmou-5-5*zoom, ymou)
                screen.blit(mli, rct_mli)
            cntl += 1
    else:
        cntl = 0
    
    # saving images
    tmuxon = os.popen('tmux ls |grep ircam1log | awk \'{print $2}\'').read()
    if tmuxon:
        saveim = True
    else:
        saveim = False
    if saveim:
        screen.blit(savem1, rct_savem1)
        screen.blit(savem2, rct_savem2)
        screen.blit(savem3, rct_savem3)
        rects = [rect1, rct_info, rct_info2, rct_zm, rct_dinfo, rct_dinfo2, rct_savem1, rct_savem2, rct_savem3, rct_sc1, rct_sc2]
    else:
        rects = [rect1, rct_info, rct_info2, rct_zm, rct_dinfo, rct_dinfo2, rct_sc1, rct_sc2]

    if logexpt:
        time.sleep(0.1)
        timeexpt = np.append(timeexpt, time.time())
        time.sleep(0.1)
        if timeexpt[-1]-timeexpt[0] > 4:
            os.system("/home/scexao/bin/log Chuckcam: changing exposure time to %d" %etime)
            timeexpt = []
            logexpt = False
    
    # =====================================
    for event in pygame.event.get():

        if event.type == QUIT:
            pygame.quit()

            # close shared memory access
            # --------------------------
            cam.close()          # global disp map
            print("Chuckcam has ended normally.")
            sys.exit()
        elif event.type == KEYDOWN:

            if event.key == K_ESCAPE:
                pygame.quit()
                # close shared memory access
                # --------------------------
                cam.close()          # global disp map
                print("Chuckcam has ended normally.")
                sys.exit()

            if event.key == K_c:
                plot_cross = not plot_cross

            if event.key == K_m:
                clr_scale = not clr_scale

            if event.key == K_q:
                if (tindex < net - 1):
                    tindex += 1
                    etime = etimes[tindex]
                    cam_cmd("tint %d %d" % (camid, etime), False)
                    bname = home+"/conf/chuckcam_aux/bias%07d.fits" % (etime,)
                    badpixmap = 1-pf.getdata(home+"/conf/chuckcam_aux/badpixmap.fits")
                    bias = pf.getdata(bname)*badpixmap
                    logexpt = True
                    
            if event.key == K_a:
                if (tindex > 0):
                    tindex -= 1
                    etime = etimes[tindex]
                    cam_cmd("tint %d %d" % (camid, etime), False)
                    bname = home+"/conf/chuckcam_aux/bias%07d.fits" % (etime,)
                    badpixmap = 1-pf.getdata(home+"/conf/chuckcam_aux/badpixmap.fits")
                    bias = pf.getdata(bname)*badpixmap
                    logexpt = True
                    
            if event.key == K_SPACE:
                cont_acq = not cont_acq
                if cont_acq:
                    cam_cmd("stream %d" % (camid,))
                else:
                    cam_cmd("abort %d" % (camid,))

            if event.key == K_d:
                subt_bias = not subt_bias
                if subt_bias:
                    bname = home+"/conf/chuckcam_aux/bias%07d.fits" % (etime,)
                    try:
                        bias = pf.getdata(bname)*badpixmap
                    except:
                        bias = np.zeros_like(temp)

            if event.key == K_h:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    os.system("tmux send-keys -t ircam1 \"hotspotalign\" C-m")
                else:
                    print(hmsg)

            if event.key == K_o:
                plot_hotspot = not plot_hotspot
                

            # secret chuck mode to re-acquire biases for all exp times
            # --------------------------------------------------------
            if event.key == K_b:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    msg = "  !! Acquiring darks !!   "
                    dinfo2 = font3.render(msg, True, BGCOL, SACOL)
                    screen.blit(dinfo2, rct_dinfo2)
                    pygame.display.update([rct_dinfo2])
                    os.system("scxkw-setter set darkchuck 1")
                    os.system("log Chuckcam: Saving internal darks")
                    
                    
                    print("In the time it takes Chuck Norris to sidekick a")
                    print("red-headed stepchild, we'll acquire all biases.")
                    
                    subt_bias = False
                    
                    whldev = "/dev/serial/by-id/"
                    whldev += "usb-FTDI_FT232R_USB_UART_A600crjy-if00-port0"
                    whl = wheel.wheel(whldev)
                    
                    slot = whl.what_slot() # remember current state
                    whl.goto("6")          # blocking the light
                    time.sleep(2.0)        # safety
                    
                    for tint in etimes:
                        cam_cmd("tint %d %d" % (camid, tint), False)
                        time.sleep(0.2+tint*1.e-6)
                        ndark = min(100, (5000000/tint))
                        for idark in range(ndark):
                            if idark == 0:
                                temp3 = get_img_data(True)/float(ndark)
                            else:
                                temp3 += get_img_data(True)/float(ndark)
                                
                        bname = home+"/conf/chuckcam_aux/bias%07d.fits"%(tint,)

                        pf.writeto(bname, temp3, clobber=True)
                        time.sleep(0.2)
                    
                    whl.goto(slot)         # back to previous state
                    time.sleep(2.0)        # safety
                    whl.close()            # closing wheel connection
                    os.system("scxkw-setter set darkchuck 0")
                    os.system("log Chuckcam: Done saving internal darks")
                        
                    cam_cmd("tint %d %d" % (camid, etime), False)

            # chuck mode to save and subtract a reference image
            # --------------------------------------------------------
            if event.key == K_r:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    msg = "!! Acquiring reference !! "
                    dinfo2 = font3.render(msg, True, BGCOL, SACOL)
                    screen.blit(dinfo2, rct_dinfo2)
                    pygame.display.update([rct_dinfo2])
 
                    subt_ref = False
                    
                    nref = min(1000, (5000000/etime))
                    for iref in range(nref):
                        if iref == 0:
                            temp3 = get_img_data(True)/float(nref)
                        else:
                            temp3 += get_img_data(True)/float(nref)
                                
                    rname = home+"/conf/chuckcam_aux/ref.fits"
                    pf.writeto(rname, temp3, clobber=True)
                    
                else:
                    rname = home+"/conf/chuckcam_aux/ref.fits"
                    ref_im = pf.getdata(rname)*badpixmap
                    subt_ref = not subt_ref

            if event.key == K_l:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    os.system("tmux send-keys -t ircam1 \"camera_stage goto lyot\" C-m")
                else:
                    lin_scale = not lin_scale

            if event.key == K_f:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    os.system("tmux send-keys -t ircam1 \"camera_stage goto focus\" C-m")

            if event.key == K_p:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    os.system("tmux send-keys -t ircam1 \"camera_stage goto piaa\" C-m")

            if event.key == K_v:
                average = not average

            if event.key == K_z:
                iz += 1
                iz %= 3
                zoom2 = zooms2[iz]
                if zoom2 != 1:
                    msgzm = "x%d" % (zoom2,)
                else:
                    msgzm = "  "
                zm = font1.render(msgzm, True, CYAN)

            if event.key == K_s:
                mmods = pygame.key.get_mods()
                if (mmods & KMOD_LCTRL):
                    saveim = not saveim
                    if saveim:
                        timestamp = dt.datetime.utcnow().strftime('%Y%m%d')
                        savepath = '/media/data/'+timestamp+'/ircam1log/'
                        ospath = os.path.dirname(savepath)
                        if not os.path.exists(ospath):
                            os.makedirs(ospath)
                        nimsave = min(1000, (50000000/etime))
                        # creating a tmux session for logging
                        os.system("tmux new-session -d -s ircam1log")
                        os.system("tmux send-keys -t ircam1log \"logshim ircam1 %i %s\" C-m"%(nimsave, savepath))
                        os.system("log Chuckcam: start logging images")
                        os.system("scxkw-setter set logchuck 1")
                    else:
                        os.system("tmux send-keys -t ircam1log \"logshimkill ircam1\"")
                        os.system("tmux kill-session -t ircam1log")
                        os.system("log Chuckcam: stop logging images")
                        os.system("scxkw-setter set logchuck 0")

    pygame.display.update(rects)

    #pygame.display.flip()
    fpsClock.tick(FPS)

pygame.quit()
sys.exit()
