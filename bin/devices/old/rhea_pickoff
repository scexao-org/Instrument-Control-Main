#!/usr/bin/env python

# ======================================================== # 
#    __          __  _           _      _          __  __  #
#   /__\  /\  /\/__\/_\    _ __ (_) ___| | _____  / _|/ _| #
#  / \// / /_/ /_\ //_\\  | '_ \| |/ __| |/ / _ \| |_| |_  #
# / _  \/ __  //__/  _  \ | |_) | | (__|   < (_) |  _|  _| #
# \/ \_/\/ /_/\__/\_/ \_/ | .__/|_|\___|_|\_\___/|_| |_|   #
#                         |_|                              #
#                                                          #
# ======================================================== #

import serial
import os
import time
import binascii
import sys
import pdb



home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import logit

import zaber_chain
zabdev  = "/dev/serial/by-id/"
zabdev += "usb-FTDI_USB_Serial_Converter_FTG4YOPA-if00-port0"


def usage():
    print """---------------------------------------
Usage: rhea_pickoff <command>
---------------------------------------
command:\n-------
    status     displays camera status
    home       sends the camera home
    goto       moves camera to position:
               numerical value 
    rhea_pickoff in
    rhea_pickoff out
examples:\n--------
    rhea_pickoff home
    rhea_pickoff goto 14500 (absolute pos)
    rhea_pickoff status
--------------------------------------- """
    sys.exit()


# =====================================================================
# =====================================================================
def main():
    args = sys.argv[1:]  # list of read arguments
    na = args.__len__()  # number of arguments

    if args == []: usage()
 
    # what dof are we actuating?
    idn = 9 #was 15


    if na < 1: # safety
        usage()

    if "home" in args[0].lower():
        zab = zaber_chain.zaber_chain(zabdev, quiet=True)
        zab.home(idn)
        zab.close()
        logit.logit('RHEA_pickoff','moved_to_position_0')
    elif ("stat" in args[0].lower()) or ("?" in args[0].lower()):
        zab = zaber_chain.zaber_chain(zabdev, quiet=True)
        position = zab.status(idn, quiet=True)
        zab.close()
        print("Axis rhea_pickoff (idn=%d): pos = %d" % (idn, position))

    elif "goto" in args[0].lower():
        if na < 2: # safety
            usage()

        try:
            pos = int(args[1])
        except:
            usage()

        relative = False
        if ('+' in args[1]) or ('-' in args[1]):
            #relative = True
            print("Relative move not implemented yet!")
            sys.exit()

        zab = zaber_chain.zaber_chain(zabdev, quiet=True)
        zab.move(idn, pos, relative=relative)
        zab.close()
        logit.logit('RHEA_pickoff','moved_to_position_'+str(pos))
    elif "in" in args[0].lower():
        pos = 0
        zab = zaber_chain.zaber_chain(zabdev, quiet=True)
        zab.move(idn, pos, relative=False)
        zab.close()
        logit.logit('RHEA_pickoff','moved_to_position_'+str(pos))
    elif "out" in args[0].lower():
        pos = 500000
        zab = zaber_chain.zaber_chain(zabdev, quiet=True)
        zab.move(idn, pos, relative=False)
        zab.close()
        logit.logit('RHEA_pickoff','moved_to_position_'+str(pos))
    else:
        usage()

if __name__ == "__main__":
    main()
