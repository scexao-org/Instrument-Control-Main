# Generated by rpcgen.py at Tue Sep 16 18:36:06 2008

import rpc
import DAQtkDatSndMemtypes
import DAQtkDatSndMemconstants
import xdrlib
try:
    # Assume that the python xdrlib comes first on the PYTHONPATH
    from xdrlib import Error as XDRError
except ImportError:
    # Never mind. I will the use pynfs one.
    from xdrlib import XDRError

class DAQTKDATSNDMEMPacker(rpc.Packer):
    pack_short = rpc.Packer.pack_int

    pack_string = rpc.Packer.pack_string

    pack_opaque = rpc.Packer.pack_opaque

    pack_int = rpc.Packer.pack_int

    pack_double = rpc.Packer.pack_double

    pack_enum = rpc.Packer.pack_enum

    pack_unsigned = rpc.Packer.pack_uint

    pack_long = rpc.Packer.pack_int

    pack_char = rpc.Packer.pack_uint

    pack_unsigned_hyper = rpc.Packer.pack_uhyper

    pack_float = rpc.Packer.pack_float

    pack_hyper = rpc.Packer.pack_hyper

    pack_bool = rpc.Packer.pack_bool

    pack_quadruple = rpc.Packer.pack_double

    pack_unsigned_int = rpc.Packer.pack_uint

    pack_unsigned_short = rpc.Packer.pack_uint

    def pack_DAQtkRpcFits(self, data):
        if not isinstance(data, DAQtkDatSndMemtypes.DAQtkRpcFits):
            raise TypeError, "pack_DAQtkRpcFits"
        if data.cframe is None:
            raise TypeError, "pack_DAQtkRpcFits: Member cframe has no value."
        if data.ph is None:
            raise TypeError, "pack_DAQtkRpcFits: Member ph has no value."
        if data.pd is None:
            raise TypeError, "pack_DAQtkRpcFits: Member pd has no value."
        if data.ah1 is None:
            raise TypeError, "pack_DAQtkRpcFits: Member ah1 has no value."
        if data.ad1 is None:
            raise TypeError, "pack_DAQtkRpcFits: Member ad1 has no value."
        if data.ah2 is None:
            raise TypeError, "pack_DAQtkRpcFits: Member ah2 has no value."
        if data.ad2 is None:
            raise TypeError, "pack_DAQtkRpcFits: Member ad2 has no value."
        if data.ah3 is None:
            raise TypeError, "pack_DAQtkRpcFits: Member ah3 has no value."
        if data.ad3 is None:
            raise TypeError, "pack_DAQtkRpcFits: Member ad3 has no value."
        if len(data.cframe) > 16: raise XDRError, "array too long packing DAQtkRpcFits.cframe"
        self.pack_array(data.cframe, self.pack_char)
        self.pack_opaque(data.ph)
        self.pack_opaque(data.pd)
        self.pack_opaque(data.ah1)
        self.pack_opaque(data.ad1)
        self.pack_opaque(data.ah2)
        self.pack_opaque(data.ad2)
        self.pack_opaque(data.ah3)
        self.pack_opaque(data.ad3)

class DAQTKDATSNDMEMUnpacker(rpc.Unpacker):
    unpack_short = rpc.Unpacker.unpack_int

    unpack_string = rpc.Unpacker.unpack_string

    unpack_opaque = rpc.Unpacker.unpack_opaque

    unpack_int = rpc.Unpacker.unpack_int

    unpack_double = rpc.Unpacker.unpack_double

    unpack_enum = rpc.Unpacker.unpack_enum

    unpack_unsigned = rpc.Unpacker.unpack_uint

    unpack_long = rpc.Unpacker.unpack_int

    unpack_char = rpc.Unpacker.unpack_uint

    unpack_unsigned_hyper = rpc.Unpacker.unpack_uhyper

    unpack_float = rpc.Unpacker.unpack_float

    unpack_hyper = rpc.Unpacker.unpack_hyper

    unpack_bool = rpc.Unpacker.unpack_bool

    unpack_quadruple = rpc.Unpacker.unpack_double

    unpack_unsigned_int = rpc.Unpacker.unpack_uint

    unpack_unsigned_short = rpc.Unpacker.unpack_uint

    def unpack_DAQtkRpcFits(self):
        seq = self.get_buffer()
        data = DAQtkDatSndMemtypes.DAQtkRpcFits()
        #data.cframe = self.unpack_array(self.unpack_char)
        n = 16
        nframe = self.unpack_farray(n, self.unpack_char)
        if len(nframe) > 16: raise XDRError, "array too long unpacking DAQtkRpcFits.cframe"
        #print "length of cframe is %d (%s)" % (len(nframe), str(nframe))
        #print "***: ", map(lambda c: '%x' % c, nframe)
        data.cframe = ''.join(map(chr, nframe))
        data.ph = self.unpack_opaque()
        data.pd = self.unpack_opaque()
        data.ah1 = self.unpack_opaque()
        data.ad1 = self.unpack_opaque()
        data.ah2 = self.unpack_opaque()
        data.ad2 = self.unpack_opaque()
        data.ah3 = self.unpack_opaque()
        data.ad3 = self.unpack_opaque()

        self.set_position(len(seq))
        
        return data

