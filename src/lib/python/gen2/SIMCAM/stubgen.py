#! /usr/bin/env python
#
# Generate instrument simulator command stubs from a list of PARA file
#   definitions.
#
#[ Eric Jeschke (eric@naoj.org) --
#  Last edit: Wed Mar 23 15:46:54 HST 2011
#]
#
"""
This simple program creates a set of empty instrument method stubs for
creating an instrument 'personality' for simcam.  You call it in the
following way, e.g.:

./stubgen.py --paradir=$OBSHOME/SPCAM/para --inst=SPCAM --type=simcam > spcam_stubs.txt

OR

./stubgen.py --paradir=$OBSHOME/SPCAM/para --inst=SPCAM --type=g2task > task_stubs.txt

You can then pull the stubs into an editor and flesh them out to create a
more complete simulation or task definition.
"""

import sys, os
import time
from optparse import OptionParser

import SOSS.DotParaFiles.ParaValidator as ParaValidator
import logging, ssdlog


templates = {}

# Template for generating methods for simcam stubs
templates['simcam'] = """\
    def %(methodname)s(self, %(kwdargs)s):
        self.logger.error("command '%(methodname)s' not yet implemented")
        res = unimplemented_res
        return res
"""        

# Template for generating Task stubs
templates['task'] = """\
class %(classname)s(%(instrument)sTask):
    def __init__(self, %(kwdargs)s):
        super(%(classname)s, self).__init__('%(classname)s', %(kwdargs2)s)
"""        

templates['g2task'] = templates['task']


def error(msg, exitcode):
    """Called for a fatal error.  Print _msg_ to stderr and exit program
    with code _exitcode_.
    """
    sys.stderr.write(msg + '\n')
    sys.exit(exitcode)


def mkclassname(cmdname):
    s = cmdname.capitalize()
    i = 0
    res = []
    while i < len(s):
        # Capitalize letters after an underscore
        if s[i] == '_':
            res.append('_')
            i += 1
            res.append(s[i].upper())
        else:
            res.append(s[i])
        i += 1
    return ''.join(res)


def main(options, args):

    if not options.paradir:
        error("Please specify a PARA file directory with --paradir", 1)
    if not options.type or (options.type not in ['simcam', 'task',
                                                 'g2task']):
        error("Please specify a --type=simcam|task", 1)

    # Create top level logger.
    logger = ssdlog.make_logger('stubgen', options)

    # Create a para file parser/validator
    validator = ParaValidator.ParaValidator(logger)

    # Load it full of para file definitions
    subsys = options.inst.upper()
    validator.loadParaDir(options.paradir, subsys=subsys)

    template = templates[options.type]
    
    # Iterate over each para definition
    parakeys = validator.keys()
    parakeys.sort()

    print "# Auto-generated by stubgen.py on %s" % (time.ctime())
    print "# -- HAND EDITING NOT ADVISED ---"
    print ""

    if options.type == 'task':
        print """
import g2Task
from Bunch import Bunch

# Special module-level constant to tell task manager what default subsystem
# these tasks are for
SUBSYS = '%s'

""" % (subsys)

    elif options.type == 'g2task':
        print """
import InsTask

# Special module-level constant to tell task manager what default subsystem
# these tasks are for
SUBSYS = '%s'

""" % (subsys)

    elif options.type == 'simcam':
        print """
unimplemented_res = 2

"""

    formats = []
    classes = []
    
    for parakey in parakeys:
        (subsys, cmdname) = parakey
        sys.stderr.write("%s:" % cmdname)
        sys.stderr.flush()
        paramObj = validator.getitem(parakey)

        paramDefs = paramObj.paramDefs
        methodDict = {'methodname': cmdname.lower(),
                      'classname': mkclassname(cmdname),
                      'instrument': subsys.upper()
                      }

        # Iterate over each parameter in this definition
        paramlst = []
        paramlst2 = []
        formatlst = []
        for param in paramObj.paramList:
            sys.stderr.write(" %s" % param)
            sys.stderr.flush()
            paramType = 'CHAR'
            formatting = 's'
            try:
                # paramDef object will be a dict-type thing, UNLESS
                # it is a CASE statement..in that case give up and
                # assume string
                paramType = paramDefs[param].defaultDef['TYPE']
                if paramType == 'NUMBER':
                    formatting = 'f'
                    try:
                        # Further try to examine the format type to
                        # see if we should format as int instead of float
                        if paramDefs[param].defaultDef['FORMAT'].endswith('d'):
                            formatting = 'd'
                    except:
                        # Assume float if we run into trouble.
                        pass
            except TypeError:
                pass
            # FOR NOW, override formatting and force all to 's'.
            # This is currently the way DD tasks are working.
            formatting = 's'
            paraml = param.lower()
            paramlst.append("%s=None" % paraml)
            paramlst2.append("%s=%s" % (paraml, paraml))
            formatlst.append("%s=%%(%s)%s" % (param, paraml, formatting))
        # Sort paramlist
        # TODO: get params in order listed in PARA file?
        #paramlst.sort()
        methodDict['kwdargs'] = ", ".join(paramlst)
        methodDict['kwdargs2'] = ", ".join(paramlst2)
        fmtstr = """
    '%s': Bunch(fmtstr='EXEC %s %s %s',
                parakey=('%s', '%s')),""" % \
        (cmdname.lower(), subsys.upper(), cmdname,
         ' '.join(formatlst), subsys.upper(), cmdname)
        formats.append(fmtstr)
        # Write out the method
        classes.append(template % methodDict)
        sys.stderr.write("\n")
        sys.stderr.flush()

    # Print out the list of formats for DD commands
    
    if options.type == 'task':
        print """
ddcmd_tbl = {
    %s
    }
    """ % ('\n'.join(formats))
        print """
####################################################################
# BASE %s TASKS
####################################################################
#
class %sTaskError(g2Task.g2TaskError):
    pass

class %sTask(g2Task.INSintTask):
    \"\"\"Base %s task from which %s device dependent commands tasks
    are derived.
    \"\"\"
    def __init__(self, ddcmd_key, **kwdargs):
        \"\"\"_ddcmd_key_ is a key to look up the details of our formatting,
        parameter checking, etc.
        \"\"\"

        ddcmd = ddcmd_tbl[ddcmd_key.lower()]

        # This copies all keyword arguments to self.params and does
        # general task initialization
        super(%sTask, self).__init__('%s', ddcmd.fmtstr,
                                        ddcmd.parakey, **kwdargs)

    #######################################
    # %s INSTRUMENT COMMANDS
    #######################################

""" % (subsys, subsys, subsys, subsys, subsys, subsys, subsys, subsys)

    elif options.type == 'g2task':
        print """
####################################################################
# BASE %s TASKS
####################################################################
#
class %sTaskError(InsTask.Ins2TaskError):
    pass

class %sTask(InsTask.Ins2Task):
    \"\"\"Base %s task from which %s device dependent commands tasks
    are derived.
    \"\"\"
    def __init__(self, cmdname, **kwdargs):
        \"\"\"_cmdname_ is the command name for this task.
        \"\"\"

        # This copies all keyword arguments to self.params and does
        # general task initialization
        super(%sTask, self).__init__('%s', cmdname, **kwdargs)

    #######################################
    # %s INSTRUMENT COMMANDS
    #######################################

""" % (subsys, subsys, subsys, subsys, subsys, subsys, subsys, subsys)

    print '\n'.join(classes)

    sys.exit(0)


if __name__ == '__main__':

    usage = "usage: %prog [options]"
    optprs = OptionParser(usage=usage, version=('%%prog'))
    
    optprs.add_option("--inst", dest="inst", metavar="NAME",
                      help="Use NAME for instrument")
    optprs.add_option("--paradir", dest="paradir", metavar="DIR",
                      help="Use DIR for retrieving instrument PARA files")
    optprs.add_option("--type", dest="type", metavar="TYPE",
                      help="Generate stubs of TYPE (simcam|task|g2task)")
    ssdlog.addlogopts(optprs)

    (options, args) = optprs.parse_args(sys.argv[1:])

    if len(args) != 0:
        optprs.error("incorrect number of arguments")

    main(options, args)


# END
