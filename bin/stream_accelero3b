#!/usr/bin/env python

from labjack import ljm
import time
import sys, os
from datetime import datetime
import numpy as np
from xaosim.scexao_shmlib import shm

# ------------------------------------------------------------------
#                access to shared memory structures
# ------------------------------------------------------------------
labid = 3 #LabJack identifier

if not os.path.isfile("/tmp/labjack%d.im.shm" % (labid,)):
    os.system("creashmim labjack%d 2 1" % (labid,))
if not os.path.isfile("/tmp/labjack%d_stream.im.shm" % (labid,)):
    os.system("creashmim labjack%d_stream 1 1" % (labid,))

aishm = shm("/tmp/labjack%d.im.shm" % (labid,)) #SHM of data
strshm = shm("/tmp/labjack%d_stream.im.shm" % (labid,)) #SHM of flag


# ------------------------------------------------------------------
#                Configure LabJack communication
# ------------------------------------------------------------------

# Open first found LabJack
handle = ljm.open(ljm.constants.dtANY, ljm.constants.ctETHERNET, "labjack3")

info = ljm.getHandleInfo(handle)
print("Opened a LabJack with Device type: %i, Connection type: %i,\n" \
    "Serial number: %i, IP address: %s, Port: %i,\nMax bytes per MB: %i" % \
    (info[0], info[1], info[2], ljm.numberToIP(info[3]), info[4], info[5]))

# Stream Configuration
aScanListNames = ["AIN0", "AIN1"]#, "AIN3"] #Scan list names to stream
numAddresses = len(aScanListNames)
aScanList = ljm.namesToAddresses(numAddresses, aScanListNames)[0]
scanRate = 140.
tint = 1/scanRate
scansPerRead = 1

try:
    # Configure the analog inputs' negative channel, range, settling time and
    # resolution.
    # Note when streaming, negative channels and ranges can be configured for
    # individual analog inputs, but the stream has only one settling time and
    # resolution.
    aNames = ["AIN_ALL_NEGATIVE_CH", "AIN_ALL_RANGE", "STREAM_SETTLING_US",
              "STREAM_RESOLUTION_INDEX"]
    aValues = [ljm.constants.GND, 1.0, 0, 0] #single-ended, +/-10V, 0 (default),
                                              #0 (default)
    ljm.eWriteNames(handle, len(aNames), aNames, aValues)

    # Configure and start stream
    #scanRate = ljm.eStreamStart(handle, scansPerRead, numAddresses, aScanList, scanRate)
    #print("\nStream started with a scan rate of %0.0f Hz." % scanRate)

    #totScans = 0
    #totSkip = 0 # Total skipped samples
    flag = strshm.get_data()
    timest0 = time.time()
    timest = 0
    timeint = 0
    i = 0
    while flag[0]:
        #print timeint, tint
        if timeint < tint:
            timest = time.time()
            timeint = timest-timest0
            #time.sleep(0.001)
        else:
            timeint =  0
            timest0 += tint
            data = np.array(ljm.eReadNames(handle,numAddresses,aScanListNames))
            #if not i:
            #    data0 = data
            #    i = 1
            #data1 = ljm.eReadName(handle,aScanListNames[0])
            #data2 = ljm.eReadName(handle,aScanListNames[1])
            #aishm.set_data0((data0+data)/2.)
            aishm.set_data0(data)
            #data0 = data
        flag = strshm.get_data()
   
except ljm.LJMError:
    ljme = sys.exc_info()[1]
    print(ljme)
except Exception:
    e = sys.exc_info()[1]
    print(e)

print "Stop Stream" 
#ljm.eStreamStop(handle)
strshm.set_data0(np.ones(1)) # put back the flag to one

# Close handle
ljm.close(handle)
