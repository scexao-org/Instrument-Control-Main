#!/usr/bin/env python

# ---------------------------------------------------------------------- #
#   _____  __                       __                  _                #
#   \_   \/__\ ___ __ _ _ __ ___   / _\_   _ _ __   ___| |__  _ __ ___   #
#    / /\/ \/// __/ _` | '_ ` _ \  \ \| | | | '_ \ / __| '_ \| '__/ _ \  #
# /\/ /_/ _  \ (_| (_| | | | | | | _\ \ |_| | | | | (__| | | | | | (_) | #
# \____/\/ \_/\___\__,_|_| |_| |_| \__/\__, |_| |_|\___|_| |_|_|  \___/  #
#                                      |___/                             #
#                                                                        #
# ---------------------------------------------------------------------- #

import sys
import numpy as np
import os
import time
from xaosim.scexao_shmlib import shm

home = os.getenv('HOME')
conf_dir = home + "/conf/palila_aux/"
sys.path.append(home+'/src/lib/python/')

# ------------------------------------------------------------------
#             short hands for opening and checking shm
# ------------------------------------------------------------------
def open_shm(shm_name, dims=(1,1), check=False):

    if not os.path.isfile("/tmp/%s.im.shm" % (shm_name,)):
        os.system("creashmim %s %d %d"  % (shm_name,dims[0],dims[1]))
    shm_data = shm("/tmp/%s.im.shm" % (shm_name,), verbose=False)
    if check:
        tmp = shm_data.mtdata['x'], shm_data.mtdata['y']
        if tmp != dims:
        #if shm_data.mtdata['size'][:2] != dims:
            os.system("rm /tmp/%s.im.shm" % (shm_name,))
            os.system("creashmim %s %d %d"  % (shm_name,xsizeim,ysizeim))
            shm_data = shm("/tmp/%s.im.shm" % (shm_data,), verbose=False)

    return(shm_data)

# ------------------------------------------------------------------
#             short hands for tmux commands
# ------------------------------------------------------------------
def tmux(cargs="", session="ircam0", command="send-keys"):
    ''' ------------------------------------------------------------
    Synthesizes and sends a tmux command. The default option was
    chosen to match the most common one, hence making the code
    below more concise.
    ------------------------------------------------------------ '''
    if cargs == "":
        os.system("tmux %s -t %s" % (command, session))
    else:
        os.system("tmux %s -t %s '%s' Enter" % (command, session, cargs))

# ------------------------------------------------------------------
#             short hands for ssh commands
# ------------------------------------------------------------------
def ssh_command(tint="", flc_oft="", cam_oft="", trigm="", delay=""):
    ''' ------------------------------------------------------------
    Synthesizes and sends a ssh command to start the trigger
    ------------------------------------------------------------ '''
    print(tint, flc_oft, cam_oft, trigm, delay)
    os.system("ssh scexao@scexao4 '/home/scexao/bin/arduino_serial %s %s %s %s %s'" % (tint, flc_oft, cam_oft, trigm, delay))

# ------------------------------------------------------------------
#             short hands for ssh stop
# ------------------------------------------------------------------
def ssh_stop():
    ''' ------------------------------------------------------------
    Synthesizes and sends a ssh command to start the trigger
    ------------------------------------------------------------ '''
    print("going back to internal trigger")
    os.system("ssh scexao@scexao4 '/home/scexao/bin/arduino_serial stop'")

# ------------------------------------------------------------------
# ------------------------------------------------------------------

hmsg = """Content of ircam_synchro.im.shm:
--------------------------------

[0]: New command requested (1) or not (0)
[1]: Internal (0) or External (1) trigger
[2]: Integration time [us]
[3]: Frame rate [Hz]
[4]: FLC delay [us]
[5]: Command delay [us]

"""

# ------------------------------------------------------------------
#                access to shared memory structures
# ------------------------------------------------------------------

ircam_synchro = open_shm("ircam_synchro", dims=(6,1))
camid = 0
param0 = np.zeros(6)

# ================================================================================
# ================================================================================
while True: # the main game loop
    
    param = ircam_synchro.get_data().astype(np.int)[0]
    # check if a new command is requested
    if param[0] != param0[0] and param[0]:
        if param[1]:
            # if external synchro is TRUE
            # read the current parameters and send the trigger
            tint = param[2]
            freq = param[3]
            flc_oft = param[4]
            delay = param[5]
            cam_ro = 22 # readout time is 22 us
            lag = 7
            tint -= lag
            flc_oft -= lag
            cam_ro -= lag
            if tint > 1e6/freq-cam_ro-flc_oft-3*lag:
                tint = int(1e6/freq-cam_ro-flc_oft-3*lag)
                freq = 1e6/(tint+cam_ro+flc_oft+3*lag)
                param[2] = tint
                param[3] = freq
                cam_oft = cam_ro
            else:
                cam_oft = int(1e6/freq-tint-flc_oft-3*lag)
                freq = 1e6/(tint+cam_oft+flc_oft+3*lag)
                param[3] = freq
            #flc_oft = 200 #200 us measured ofset, should be 100 us
            # Send the command to the Arduino
            ssh_command(tint, flc_oft, cam_oft, 0, delay)
            time.sleep(1)
            tmux("set extsynchro on", session="ircam%dctrl"%(camid,))
            time.sleep(1)
            # set boolean of command sent to TRUE
            param[0] = 0
            ircam_synchro.set_data(param.astype(np.float32))
        elif not param[1]:
            # if external synchro is FALSE, return to internal trigger
            tmux("set extsynchro off", session="ircam%dctrl"%(camid,))
            time.sleep(1)
            ssh_stop()
            param[0] = 0
            ircam_synchro.set_data(param.astype(np.float32))
        param0 = param
    else:
        time.sleep(0.05)
            
            

sys.exit()
