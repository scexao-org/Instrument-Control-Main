#!/usr/bin/env python3

# ================================================= #
#                   _       _       _               #
#   /\/\   ___   __| |_   _| | __ _| |_ ___  _ __   #
#  /    \ / _ \ / _` | | | | |/ _` | __/ _ \| '__|  #
# / /\/\ \ (_) | (_| | |_| | | (_| | || (_) | |     #
# \/    \/\___/ \__,_|\__,_|_|\__,_|\__\___/|_|     #
#                                                   #
# ================================================= #

import serial
import os
import time
import binascii
import sys
import pdb
import numpy as np



home = os.getenv('HOME')
sys.path.append(home+'/bin/devices/')
import analog_output
sys.path.append(home+'/src/lib/python/')
import logit #Custom logging library

delay=0.5
relative=False
arduino = "/dev/serial/by-id/usb-Arduino__www.arduino.cc__Arduino_Due_Prog._Port_5583234353835131E0C2-if00"

class ser2arduino(object):
    def __init__(self,arduino):
        self.s=serial.Serial(arduino, 115200, timeout=0.5)
        self.s.setDTR(False)
        time.sleep(1)
        self.s.flushInput()
        
    def command(self,command):
        self.s.write(str.encode(str(command[0]+" "+command[1]+" "+command[2]+" "+command[3]+"\r\n")))
        time.sleep(0.5)
        print('Arduino answers: ')
        print(self.s.readlines())
        time.sleep(0.5)
        

    def close(self):
        self.s.close()


def usage():
    print("""---------------------------------------
Usage: serial_to_arduino <int> <pulsew> <offset> <tmode>
---------------------------------------
command:\n-------
    int        integration time of the camera [us]\n
    pulsew     pulse widths [us]\n
    offset     FLC trigger offset [us]\n
    tmode      trigger mode [boolean]\n

examples:\n--------
    serial_to_arduino 1000 50 50 1\n
--------------------------------------- """)
    sys.exit()


def main():
    args = sys.argv[1:]  # list of read arguments
    na = args.__len__()  # number of arguments

    if na != 4:
        usage()

    else: 
        dev = ser2arduino(arduino)
        dev.command(args)
        dev.close()
        
if __name__ == "__main__":
    main()
