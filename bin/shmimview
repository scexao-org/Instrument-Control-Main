#!/usr/bin/env python

import pygame, sys
from pygame.locals import *
import numpy as np
import matplotlib.cm as cm
import os
import time
from PIL import Image

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import colormaps as cmaps
from   scexao_shm   import shm



hmsg = """

########################################

Shared memory structure live viewer
-----------------------------------

command:
-------

>> shmview /tmp/xxx.shm [zoom_factor]

note: default zoom factor is 2

ex:
--

>> shmview /tmp/ircam2.im.shm 3
>> shmview /tmp/dmdispcombconf.conf.shm 5

########################################

display controls:
----------------
l     : linear/non-linear display
m     : color/gray color-map
ESC   : quit shmview

########################################

"""
args = sys.argv[1:]
if args == []: 
    print(hmsg)
    cam = shm("/tmp/ircam%d.im.shm" % (2,))
else:
    cam = shm(args[0])

if args.__len__() == 2:
    zoom = int(args[1])
else:
    zoom = 2

# ------------------------------------------------------------------
#                       global variables
# ------------------------------------------------------------------
mycmap = cm.gray
if cam.naxis == 1:
    (xsize, ysize) = (cam.size[:cam.naxis], 1)
else:
    (xsize, ysize) = cam.size[:cam.naxis]

# -----------------------
#   set up the window
# -----------------------
pygame.init()

FPS = 20                        # frames per second setting
fpsClock = pygame.time.Clock()  # start the pygame clock!
XW, YW = 650, 712
XW, YW = zoom * xsize, zoom * ysize

screen = pygame.display.set_mode((XW, YW), 0, 32)
pygame.display.set_caption('shared memory live viewer')

# ------------------------------------------------------------------
#             short hands for shared memory data access
# ------------------------------------------------------------------
def get_img_data(check=False):
    ''' ----------------------------------------
    Return the current image data content,
    formatted as a 2D numpy array.
    Reads from the already-opened shared memory
    data structure.
    ---------------------------------------- '''
    return(cam.get_data(check, True).astype(float))

# ------------------------------------------------------------------
#  another short hand to convert numpy array into image for display
# ------------------------------------------------------------------
def arr2im(arr, vmin=0., vmax=10000.0, pwr=1.0):
    
    arr2 = arr.astype('float')**pwr
    mmin,mmax = arr2.min(), arr2.max()
    #mmax = np.percentile(arr2, 99)
    arr2 -= mmin
    arr2 /= (mmax-mmin)

    if zoom != 1:
        img = Image.fromarray(arr2)
        rimg = img.resize((zoom*ysize, zoom*xsize))
        rarr = np.asarray(rimg)
        test = mycmap(rarr)
    else:
        test = mycmap(arr2)
    return((255*test[:,:,:3]).astype('int'))

# ------------------------------------------------------------------
#              !!! now we are in business !!!!
# ------------------------------------------------------------------

WHITE = (255, 255, 255)
GREEN = (  0, 255,   0) 
BLUE  = (  0,   0, 255)
RED   = (255,   0,   0)
BLK   = (  0,   0,   0)

FGCOL = WHITE  # foreground color (text)
BGCOL = BLK    # background color
BTCOL = BLUE   # *button* color

background = pygame.Surface(screen.get_size())
background = background.convert()
background.fill(BLK)

# ----------------------------
#          labels
# ----------------------------
font1 = pygame.font.SysFont("default",   48)
font2 = pygame.font.SysFont("default",   30)
font3 = pygame.font.SysFont("monospace", 16)

xws = xsize*zoom
yws = ysize*zoom

imin, imax = 0, 0
surf_live = pygame.surface.Surface((zoom*xsize, zoom*ysize))
#screen.blit(surf_live, (5,5))

rect1 = surf_live.get_rect()
rect1.center = (xws/2, yws/2)

temp      = get_img_data()


plot_cross = True  # flag for display of the crosses
subt_bias  = False # flag for bias subtraction
cont_acq   = False 
lin_scale  = True  # flag for linear range
clr_scale  = False # flag for the display color scale
bias = np.zeros_like(temp)


# =======================================================
# =======================================================
while True: # the main game loop
    clicked = False

    pwr0 = 1.0
    if not lin_scale:
        pwr0 = 0.3

    mycmap = cm.gray
    if clr_scale:
        mycmap = cmaps.inferno

    # read image
    temp      = get_img_data()

    imin, imax = temp.min(), temp.max()
    temp -= imin
    myim      = arr2im(temp.transpose(), pwr=pwr0)

    imax = np.percentile(temp, 99.95)
    msg = ""#"(min,max) = (%5d,%5d)" % (imin, imax)

    # display information
    pygame.surfarray.blit_array(surf_live, myim)
    screen.blit(surf_live, rect1)


    # =====================================
    for event in pygame.event.get():

        if event.type == QUIT:
            pygame.quit()

            # close shared memory access
            # --------------------------
            cam.close()          # global disp map
            print("shmview has ended normally.")
            sys.exit()
        elif event.type == KEYDOWN:

            if event.key == K_ESCAPE:
                pygame.quit()
                # close shared memory access
                # --------------------------
                cam.close()          # global disp map
                print("shmview has ended normally.")
                sys.exit()
            if event.key == K_m:
                clr_scale = True - clr_scale

            if event.key == K_l:
                lin_scale = True - lin_scale

            if event.key == K_h:
                print(hmsg)

    #pygame.display.update([rect1, rect2, rct, rct2, rct_info, rct_dinfo])
    pygame.display.flip()

    fpsClock.tick(FPS)

pygame.quit()
sys.exit()
