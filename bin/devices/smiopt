#!/usr/bin/env python

# ===================================== #
#  __           _____  ___  ___  _____  #
# / _\  /\/\    \_   \/___\/ _ \/__   \ #
# \ \  /    \    / /\//  // /_)/  / /\/ #
# _\ \/ /\/\ \/\/ /_/ \_// ___/  / /    #
# \__/\/    \/\____/\___/\/      \/     #
#                                       #
# ===================================== #

import serial
import os
import time
import binascii
import sys
import pdb
import subprocess
import numpy as np


delay=0.2

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import analog_input #Custom logging library

ainame="/dev/serial/by-path/pci-0000:00:1d.0-usb-0:1.8.1.4:1.0-port0"

def usage():
    print """---------------------------------------
Usage: smiopt <arg>
---------------------------------------
arg:\n---
    # of modes you want to control     

--------------------------------------- """
    sys.exit()

# =====================================================================
# =====================================================================
def main():
    args = sys.argv[1:]  # list of read arguments
    na = args.__len__()  # number of arguments
    quiet = True

    if args == []: usage()

    if na == 1:
        amplitude=0.1
        ptave=5
        ai = analog_input.ainput(ainame)
        initial=ai.read(ptave)
        print initial
        delta=0.05
        n=int(args[0].lower())
        
        matrix = np.matrix(np.identity(n), copy=False)
        out = np.zeros((n))
        #matrix[0,:]=np.array((1.0,0.3,0.5))
        #pdb.set_trace()
        initave=np.zeros((n))
        
        initave=np.sum(matrix,axis=0)/n
        #print initave
        #pdb.set_trace()

        while delta>0.005:
            for i in range(0,n):
                vector=matrix[i,:]
                ind=np.where(vector!=0)[1]
                siz=np.size(ind)
                for j in range(0,siz):
                    #pdb.set_trace()
                    #l=j+2
                    #print j
                    #print str(ind[0,j]+2)
                    #print str(amplitude*int(vector[0,str(ind[0,j])]))
                    #print "hello"
                    os.system("dm_add_zernike " + str(ind[0,j]+2) +' '+str(amplitude*vector[0,str(ind[0,j])]) + ' '+ str(4))
                    #delay
                #pdb.set_trace()
                delay
                out[i]=ai.read(ptave)
                #print out[i]
                os.system("dmdispzero 0 "+ str(4))
            #pdb.set_trace()
            print out
            minind = np.where(out==np.min(out))
            delta=(np.max(out)-initial)/initial
            print delta
            initial=np.max(out)
            #index=np.int(minimum)
            
            k = np.float(np.size(out))
            avemat = (np.sum(matrix[0:k,:], axis=0)-matrix[minind[0][0],:])/(k-1)
            
            newvec = 2*avemat-matrix[minind[0][0],:]
            matrix[minind[0][0],:]=newvec
            print matrix
            #pdb.set_trace()
            finave=np.sum(matrix,axis=0)/n
            diff=finave-initave
            tot=0
            for i in range(0,n):
                tot=tot+diff[0,i]**2
            dist=np.sqrt(tot)
            print dist
            #pdb.set_trace()
        
        
        coor=np.where(out==np.max(out))
        #pdb.set_trace()
        opticoef1=matrix[coor,:]
        Zernamp=opticoef1[0,0]*amplitude
        print Zernamp
        

        matrix2=np.zeros(matrix.shape)
        for i in range(0,n):
            matrix2[i,:]=np.mean(matrix,axis=0)
        
        print matrix2 
        ident = np.matrix(np.identity(n), copy=False)
        matrix2=matrix2+ident
        #pdb.set_trace()
        blah = '''
        scaling=3
        amplitude=amplitude/scaling
        delta=0.01
        #apply average vector and then measure initial
        initial=ai.read(ptave)
        print initial
        
        while delta>0.002:
            for i in range(0,n):
                vector=matrix2[i,:]
                ind=np.where(vector!=0)[1]
                siz=np.size(ind)
                for j in range(0,siz):
                    #pdb.set_trace()
                    #l=j+2
                    #print j
                    #print str(ind[0,j]+2)
                    #print str(amplitude*int(vector[0,str(ind[0,j])]))
                    #print "hello"
                    os.system("dm_add_zernike " + str(ind[0,j]+2) +' '+str(amplitude*vector[0,str(ind[0,j])]) + ' '+ str(4))
                    #delay
                #pdb.set_trace()
                delay
                out[i]=ai.read(ptave)
                #print out[i]
                os.system("dmdispzero 0 "+ str(4))
            #pdb.set_trace()
            print out
            minind = np.where(out==np.min(out))
            delta=(np.max(out)-initial)/initial
            print delta
            initial=np.max(out)
            #index=np.int(minimum)
            
            k = np.float(np.size(out))
            avemat = (np.sum(matrix2[0:k,:], axis=0)-matrix2[minind[0][0],:])/(k-1)
            newvec = 2*avemat-matrix2[minind[0][0],:]
            matrix2[minind[0][0],:]=newvec
            print matrix2
            #pdb.set_trace()

        coor=np.where(out==np.max(out))
        #pdb.set_trace()
        opticoef1=matrix2[coor,:]
        Zernamp=opticoef1[0,0]*amplitude
        print Zernamp
'''
    else:
        usage()
            
if __name__ == "__main__":
    main()

   

   
                        
        
        
