#!/usr/bin/env python

# ============================================================ #
#    ________  __  __  _____         _      _          __  __  #
#   / __\_   \/__\/ _\/__   \  _ __ (_) ___| | _____  / _|/ _| #
#  / _\  / /\/ \//\ \   / /\/ | '_ \| |/ __| |/ / _ \| |_| |_  #
# / / /\/ /_/ _  \_\ \ / /    | |_) | | (__|   < (_) |  _|  _| #
# \/  \____/\/ \_/\__/ \/     | .__/|_|\___|_|\_\___/|_| |_|   #
#                             |_|                              #
# ============================================================ #

import os
import sys

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import logit #Custom logging library
import zaber_chain2 as zaber_chain
import conex2 as conex
con = conex.conex()

# SPECIFIC PARAMETERS FOR THIS WHEEL

cid = "/dev/serial/by-id/"
cid1 = cid+"usb-Newport_CONEX-AGP_A6YJRQ8U-if00-port0" 
cid2 = cid+"usb-Newport_CONEX-AGP_A6YJRQJX-if00-port0"

conexname = "FIRST_pickoff"

# GENERIC CODE

filename = "/home/scexao/bin/devices/conf/conf_"+conexname+".txt"

slots = [line.rstrip('\n') for line in open(filename)]
nslots = len(slots)
nparam = len(slots[0].split(';'))
for i in range(nparam):
    exec "param%d = []" % (i,)

for j in range(nslots):
    sparam = slots[j].split(';')
    for i in range(nparam):
        exec "param%d.append(sparam[i])" % (i,)

def usage():
    print """---------------------------------------
Usage: %s <ID> <command> <arg>
---------------------------------------
ID:
    1     left arm
    2     right arm
COMMAND:
    status     displays status
    home       sends home
    goto       moves position: numerical value
    in/out     move optics in/out of the beam
ARG:
    position (between 0 and 27 mm)
EXAMPLES:
    %s 1 home
    %s 2 in
    %s 1 goto 5
CONTENT:""" % (conexname,conexname,conexname,conexname)
    for i in range(nslots):
        print "   ", param0[i], param1[i]
        
    print "--------------------------------------- "
    sys.exit()

def quickhelp():
    print "%20s       FIRST pickoff mirrors" % (conexname,)

# =====================================================================
# =====================================================================

def main():
    args = sys.argv[1:]
    na = args.__len__()

    quiet = True
    if args == []:
        usage()

    if "--help1" in args[0].lower():
        quickhelp()

    elif ("1" in args[0].lower()) or ("2" in args[0].lower()):
        if "1" in args[0].lower():
            cid = cid1
            col = 2
        elif "2" in args[0].lower():
            cid = cid2
            col = 3
        else:
            usage()
            
        if na > 1:
            
            if "home" in args[1].lower():   #Home command
                con.open(cid, conexname)
                con.home(conexname)
                con.close()
                logit.logit(conexname+"_"+str(args[0]),'Homed')
                sys.exit()

            elif ("?" in args[1].lower()) or ("st" in args[1].lower()):
                con.open(cid, conexname)
                con.status(conexname, col)
                con.close()
                sys.exit()
                
            elif "in" in args[0].lower():
                con.open(cid, conexname)
                exec "pos = param%d[0]" % (col,)
                con.move(float(pos), conexname)
                con.close()
                logit.logit(conexname+"_"+str(args[0]),'moved_to_in_'+pos)
                
            elif "out" in args[0].lower():
                con.open(cid, conexname)
                exec "pos = param%d[1]" % (col,)
                con.move(float(pos), conexname)
                con.close()
                logit.logit(conexname+"_"+str(args[0]),'moved_to_out_'+pos)

            elif "goto" in args[1].lower():  #Goto commands
                if na < 3:
                    usage()
                elif args[2].isdigit():
                    pos = args[2]
                    con.open(cid, conexname)
                    con.move(float(pos), conexname)
                    con.close()
                    logit.logit(conexname+"_"+str(args[0]),'moved_to_'+pos)

                else:
                    usage()
                sys.exit()
            
            else:
                usage() 
        else:
            usage()
    else:
        usage()


# =====================================================================
if __name__ == "__main__":
    main()
