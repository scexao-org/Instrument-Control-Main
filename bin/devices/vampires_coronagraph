#!/bin/bash

tempfile=$(mktemp 2>/dev/null) || tempfile=/tmp/vampres_coronagraph_aux$$
trap 'rm -f $tempfile' 0 1 2 5 15

# ===============================================================
# DEFAULTS
vfcmd="/home/scexao/bin/devices/vampires_fieldstop"
step_size="0.01" # 10 um
fpm=$($vfcmd status | awk -F '[ ,]+' '{print $5}') # read current value from device status 
fpm_selected=5 # this is the selected mask ('Open' by default), may be different from current mask
fpm_align_choice="z" # keep this outside of loop for scoping

# ===============================================================
# READ POSITIONS

echo "reading FPM positions"
fpm_conf_file="/home/scexao/bin/devices/conf/conf_vampires_fieldstop.txt"
declare -a fpm_number
declare -a fpm_description
declare -a fpm_x
declare -a fpm_y
declare -a fpm_color
i=1
IFS=$'\n'
for line in $(<$fpm_conf_file);
do
    fpm_number[$i]=$(echo "$line" | cut -d\; -f 1)
    fpm_description[$i]=$(echo "$line" | cut -d\; -f 2)
    fpm_x[$i]=$(echo "$line" | cut -d\; -f 3)
    fpm_y[$i]=$(echo "$line" | cut -d\; -f 4)
    fpm_color[$i]=$(echo "$line" | cut -d\; -f 5)
    i=$i+1
done
nmasks=${#fpm_number[@]}
tmux new-session -d -s vampires_coronagraph

#=======================================================================
# =================== STATE MACHINE ====================================

# states:
# menuhome
# menuexit
# save_config
# fpm_select
# fpm_move
# fpm_rename
# fpm_align 
# step_size_menu
# focus_stage
state="menuhome"

# dialog escape codes
OK=0
CANCEL=1
EXTRA=3
ESC=255

tmux send-keys -t vampires_coronagraph "echo 'START STATE MACHINE'" C-m

# switch to "alternate screen"
tput smcup

while true; do
    
    stateok=0
    
    # ================================================================
    # Home Menu 
    # ============================================================
    if [ $state == "menuhome" ]; then
	stateok=1
	name=$(echo "${fpm_description[fpm]}" | xargs)
	name_selected=$(echo "${fpm_description[fpm_selected]}" | xargs)
	menuname=$(printf "Current mask: %s\nSelected mask: %s\n\nWARNING: make sure to check the EM gain in VAMPIRES before changing focal plane masks. If you are removing a mask you are likely to saturate the EM-CCDs." "$name" "$name_selected")

	menuitems=( "s" "[S]elect focal plane mask")
	menuitems+=( "m" "[M]ove the selected FPM in")
	menuitems+=( "a" "Manual FPM [a]lignment")
	menuitems+=( "f" "Move the [f]ocus stage")
	
	dialog --title "VAMPiRES Coronagraph" \
	    --ok-label "Select" \
	    --cancel-label "Exit" \
	    --menu "$menuname" \
	    50 80 50 "${menuitems[@]}"  2> $tempfile
	
	retval=$?
	choiceval=$(cat $tempfile)
	case $retval in
	    $OK) case $choiceval in
  		    s) state="fpm_select";;
		    m) state="fpm_move";;
		    a) state="fpm_align";;
		    f) state="focus_stage";;
		esac;;
	    $CANCEL) state="menuexit";;
	esac
    fi

    # ==========================================================
    #  SELECT FPM 
    if [ $state == "fpm_select" ]; then
	stateok=1
	menuitems=()
	for i in $(seq 1 "$nmasks");
	do
            menuitems+=( "${fpm_number[i]}" "${fpm_description[i]}" )
	done

	menuname="Select coronagraphic mask. Note: this will not move the mask into position. To move mask into position, use 'move the selected FPM in' from the main menu."

	dialog --title "Select Coronagraph" \
	    --ok-label "Select" \
            --cancel-label "Return" \
	    --extra-button --extra-label "Rename" \
            --default-item ${fpm_selected} \
	    --menu "$menuname" \
            50 80 50 "${menuitems[@]}"  2> $tempfile

	retval=$?

	case $retval in
	    $OK) fpm_selected=$(cat $tempfile)
               state="menuhome";;
	    $EXTRA) fpm_selected=$(cat $tempfile)
               state="fpm_rename";; 
	    $CANCEL) state="menuhome";;
            $ESC) state="menuhome";;
	esac
	
    fi

    # ==========================================================
    # RENAME FPM 
    if [ $state == "fpm_rename" ]; then
	stateok=1
        	
	menuname="Enter new name for FPM #${fpm_number[fpm_selected]}"

        dialog --title "Rename FPM" \
	    --ok-label "Select" \
            --cancel-label "Return" \
	    --inputbox "$menuname" \
	    50 80 "${fpm_description[fpm_selected]}" 2> $tempfile
	
	retval=$?

	if [ $retval -eq $OK ]; then
            fpm_description[$fpm_selected]=$(cat $tempfile)
	    cp $fpm_conf_file /home/scexao/bin/devices/conf/archive/
	    rm $fpm_conf_file
	    for i in $(seq 1 "$nmasks");
	    do
	        printf '%s;%s;%-6s;%-6s;%s\n' "${fpm_number[i]}" "${fpm_description[i]}" "${fpm_x[i]}" "${fpm_y[i]}" "${fpm_color[i]}" >> $fpm_conf_file
	    done

	    tmux send-keys -t vampires_coronagraph "echo 'saving FPM configuration'" C-m
	    tmux send-keys -t vampires_coronagraph "$vfcmd &" C-m
	fi

	state="fpm_select"
    fi

    # ==========================================================
    #  FPM MOVE DIALOG
    if [ $state == "fpm_move" ]; then
	stateok=1
	menuname="Waiting for mask to move..."
	# if selected mask is the same, move will be short
	if [ $fpm -eq $fpm_selected ]; then
	    wait_time=0 # seconds
	else
            wait_time=10 # seconds
	fi
	fpm=$fpm_selected

        tmux send-keys -t vampires_coronagraph "$vfcmd ${fpm_number[fpm_selected]}" C-m

        dialog --title "Move FPM" \
	    --pause "$menuname" \
            50 80 "$wait_time"

	state="menuhome"
    fi 

    # ==========================================================
    #  MANUAL ALIGNMENT FPM 
    if [ $state == "fpm_align" ]; then
	stateok=1

	menuitems=(  "z" "Step si[z]e : $step_size mm")
        menuitems+=( "c" "Save position to [c]onfiguration file")
	menuitems+=( "a" "Move left")
	menuitems+=( "s" "Move up")
	menuitems+=( "d" "Move down")
	menuitems+=( "f" "Move right")

        menuname=$(printf "Current position\tx: %s [mm] y: %s [mm]\nNote: nudge directions are relative to 'vcamim1' (which is the left camera in vControl)." "${fpm_x[$fpm]}" "${fpm_y[$fpm]}")

	dialog --title "FPM manual alignment" \
	    --ok-label "Select" \
            --cancel-label "Exit" \
	    --extra-button --extra-label "Return" \
	    --default-item "$fpm_align_choice" \
	    --menu "$menuname" \
	    50 80 50 "${menuitems[@]}"  2> $tempfile

	retval=$?
	choiceval=$(cat $tempfile)

	case $retval in
	    $OK) fpm_align_choice=$choiceval
		case $choiceval in
  		    z)  state="step_size_menu";;
	 	    c)  state="save_config";;
		    a)  fpm_y[$fpm]=$(bc -l <<< "scale=3; ${fpm_y[fpm]}-$step_size")
			tmux send-keys -t vampires_coronagraph "$vfcmd y goto ${fpm_y[fpm]}" C-m
			sleep 0.1
			state="fpm_align";;
		    s)  fpm_x[$fpm]=$(bc -l <<< "scale=3; ${fpm_x[fpm]}-$step_size")
			tmux send-keys -t vampires_coronagraph "$vfcmd x goto ${fpm_x[fpm]}" C-m
			sleep 0.1
			state="fpm_align";;
		    d)  fpm_x[$fpm]=$(bc -l <<< "scale=3; ${fpm_x[fpm]}+$step_size")
			tmux send-keys -t vampires_coronagraph "$vfcmd x goto ${fpm_x[fpm]}" C-m
			sleep 0.1
			state="fpm_align";;
		    f)  fpm_y[$fpm]=$(bc -l <<< "scale=3; ${fpm_y[fpm]}+$step_size")
			tmux send-keys -t vampires_coronagraph "$vfcmd y goto ${fpm_y[fpm]}" C-m
			sleep 0.1
			state="fpm_align";;
		esac;;
	    $CANCEL) state="menuexit";;
	    $EXTRA) state="menuhome";;
	    $ESC) state="menuhome";;
	esac

    fi

    # ==========================================================
    #  MANUAL FOCUS ALIGNMENT 
    if [ $state == "focus_stage" ]; then
	stateok=1
	curpos=$(ssh lestat@vampires conex 5 TP | sed "s/\r//")
        menuname=$(printf "Current position: %s mm\n\nMove the focus stage on VAMPIRES (note this runs commands over ssh). Input will be truncated to the nearest 0.01 mm" "$curpos")

	dialog --title "Focus alignment" \
	    --ok-label "Select" \
            --cancel-label "Exit" \
	    --extra-button --extra-label "Return" \
	    --inputbox "$menuname" \
	    50 80 "$curpos" 2> $tempfile

	retval=$?
	choiceval=$(cat $tempfile)

	case $retval in
	    $OK) curpos=$(bc -l <<< "scale=2; $choiceval")
		curpos="$choiceval"
		tmux send-keys -t vampires_coronagraph "ssh lestat@vampires conex 5 PA $curpos" C-m
		state="menuhome";;
	    $CANCEL) state="menuexit";;
	    $EXTRA) state="menuhome";;
	    $ESC) state="menuhome";;
	esac

    fi

    # ==========================================================
    # AMPLITUDE ALIGNMENT FPM
    if [ $state == "step_size_menu" ]; then
	stateok=1

	dialog --title "FPM Alignment Amplitude" \
	    --ok-label "Select" \
            --cancel-label "Return" \
            --inputbox "Enter step size (mm). Values below 0.001 mm are not recognized." \
            50 80 $step_size 2> $tempfile
	retval=$?

	if [ $retval -eq $OK ]; then
            step_size=$(cat $tempfile)
	fi
	state="fpm_align"

    fi

    # ==========================================================
    #  SAVE POSITION FPM
    if [ $state == "save_config" ]; then
	stateok=1

	cp $fpm_conf_file /home/scexao/bin/devices/conf/archive/
	rm $fpm_conf_file
	for i in $(seq 1 "$nmasks")
	do
	    printf '%s;%s;%-6s;%-6s;%s\n' "${fpm_number[$i]}" "${fpm_description[$i]}" "${fpm_x[$i]}" "${fpm_y[$i]}" "${fpm_color[$i]}" >> $fpm_conf_file
	done

	tmux send-keys -t vampires_coronagraph "echo 'saving FPM configuration'" C-m
	tmux send-keys -t vampires_coronagraph "$vfcmd &" C-m

	state="menuhome"
    fi
    
    # ==========================================================
    # EXIT MODE
    if [ $state == "menuexit" ]; then
	stateok=1
	# put original screen back
	tput rmcup
	exit 0
    fi
    
    # ==========================================================
    #  ERROR MODE
    if [ $stateok = 0 ]; then
	tmux send-keys -t vampires_coronagraph "echo 'state \"$state\" not recognized ... exit'" C-m
	# put original screen back
	tput rmcup
	exit 1
    fi
done
