#!/usr/bin/env python

# ================================================== #
#  ___ ___   _     _   _              _           _  #
# | _ |_ _| /_\   /_\ / |  __ ___ _ _| |_ _ _ ___| | #
# |  _/| | / _ \ / _ \| | / _/ _ | ' |  _| '_/ _ | | #
# |_| |___/_/ \_/_/ \_|_| \__\___|_||_\__|_| \___|_| #
#                                                    #
# ================================================== #

import os
import sys

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import logit #Custom logging library
import zaber_chain2 as zaber_chain
import conex2 as conex
con = conex.conex()

# SPECIFIC PARAMETERS FOR THIS WHEEL

zabdev  = "/dev/serial/by-path/"
zabdev += "pci-0000:00:1d.0-usb-0:1.2.4.4.4.2:1.0-port0"

idnx = 5
idny = 4

cid = "/dev/serial/by-id/"
cid += "usb-Newport_CONEX-AGP_A6WSC39W-if00-port0"

conexname = "piaa1"

# GENERIC CODE

filename = "/home/scexao/bin/devices/conf/conf_"+conexname+".txt"

slots = [line.rstrip('\n') for line in open(filename)]
nslots = len(slots)
nparam = len(slots[0].split(';'))
for i in range(nparam):
    exec "param%d = []" % (i,)

for j in range(nslots):
    sparam = slots[j].split(';')
    for i in range(nparam):
        exec "param%d.append(sparam[i])" % (i,)

def usage():
    print """---------------------------------------
Usage: %s <dev> <command> <arg>
---------------------------------------
DEV:
    wheel      rotate  wheel
    x          horizontal axis
    y          vertical axis
COMMAND:
    status     displays status
    home       sends home
    goto       moves position: numerical value
ARG:
    1 - %d (wheel slot position)
    numerical value (zaber steps)
EXAMPLES:
    %s wheel/x/y home
    %s x goto 14500 (absolute pos)
    %s y goto -3413 (relative move)
    %s x status
    %s wheel goto 5 (change wheel slot)
CONTENT:""" % (conexname,nslots,conexname,conexname,conexname,conexname,conexname)
    for i in range(nslots):
        print "   ", param0[i], param1[i]
        
    print "--------------------------------------- "
    sys.exit()

def quickhelp():
    print "%20s       PIAA lenses #1 wheel" % (conexname,)

# =====================================================================
# =====================================================================
def main():
    args = sys.argv[1:]  # list of read arguments
    na = args.__len__()  # number of arguments

    if args == []: usage()

    if "--help1" in args[0].lower():
        quickhelp()

    elif "wheel" in args[0].lower():
        if na > 1:
            
            if "home" in args[1].lower():   #Home command
                con.open(cid, conexname)
                con.home(conexname)
                con.close()
                logit.logit(conexname+'_wheel','Homed')
                sys.exit()

            elif ("?" in args[1].lower()) or ("st" in args[1].lower()):
                con.open(cid, conexname)
                con.status(conexname)
                con.close()
                sys.exit()

            elif "goto" in args[1].lower():  #Goto commands
                if na < 3:
                    usage()
                elif args[2].isdigit():
                    slot = int(args[2])
                    if (1 <= slot <= nslots):
                        con.open(cid, conexname)
                        pos = param2[slot-1]
                        con.move(float(pos), conexname)
                        con.close()
                        logit.logit(conexname+'_wheel','moved_to_slot_'+str(slot))
                    else:
                        print("Wheel only has "+str(nslots)+" positions")

                else:
                    print("Select a slot between 1 and "+str(nslots))
                sys.exit()
            
            else:
                usage() 
        else:
            usage()

    # what dof are we actuating?
    elif "x" in args[0].lower():
        idn = idnx
    elif "y" in args[0].lower():
        idn = idny
    else:
        usage()

    if  ("x" in args[0].lower()) or ("y" in args[0].lower()):
        if na < 2: # safety
            usage()
            
        if "home" in args[1].lower():
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.home(idn)
            zab.close()
            logit.logit(conexname+"_"+str(args[0]),'Homed')

        elif ("?" in args[1].lower()) or ("st" in args[1].lower()):
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.status(idn, quiet=True)
            zab.close()
            
        elif "goto" in args[1].lower():
            if na < 3: # safety
                usage()
                
            try:
                pos = int(args[2])
            except:
                usage()
                
            zab = zaber_chain.zaber_chain(zabdev, quiet=True)
            zab.move(idn, pos)
            zab.close()
            logit.logit(conexname+'_'+str(args[0]),'moved_to_'+str(pos))
            
    
        else:
            usage()

if __name__ == "__main__":
    main()
