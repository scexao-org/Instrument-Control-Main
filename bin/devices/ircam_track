#!/usr/bin/env python

# ------------------------------------------------------- #
#    ___  ___   ________   _____                     _    #
#   / _ \/ __\ / __\_   \ /__   \__ _ _ __ __ _  ___| |_  #
#  / /_)/ /   / _\  / /\/   / /\/ _` | '__/ _` |/ _ \ __| #
# / ___/ /___/ / /\/ /_    / / | (_| | | | (_| |  __/ |_  #
# \/   \____/\/  \____/    \/   \__,_|_|  \__, |\___|\__| #
#                                         |___/           #
#  _____                _    _                            #
# /__   \_ __ __ _  ___| | _(_)_ __   __ _                #
#   / /\/ '__/ _` |/ __| |/ / | '_ \ / _` |               #
#  / /  | | | (_| | (__|   <| | | | | (_| |               #
#  \/   |_|  \__,_|\___|_|\_\_|_| |_|\__, |               #
#                                    |___/                #
#                                                         #
# ------------------------------------------------------- #

import numpy as np
import os,sys,time
import matplotlib.pyplot as plt
import math as m
from xaosim.scexao_shmlib import shm
import subprocess

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
import image_processing as impro
import vibration as vib

from scxkw.config import REDIS_DB_HOST, REDIS_DB_PORT
from scxkw.redisutil.typed_db import Redis


slopesteeringtheta = -8.0402870315665422e-02
slopesteeringphi = 0.10938040525309624
slopeoap4theta = 4.6688518976026505e-02
quadoap4theta = 3.8675589199720413e-03
slopeoap4phi = 0.34508821721121127

rdb = Redis(host=REDIS_DB_HOST, port=REDIS_DB_PORT)

def RDB_pull(rdb):

    fits_keys_to_pull = {'D_IMRPAD','X_OAP4TH','X_OAP4PH','X_STRTHE','X_STRPHI'}
    # Now Getting the keys
    with rdb.pipeline() as pipe:
        for key in fits_keys_to_pull:
            pipe.hget(key, 'FITS header')
            pipe.hget(key, 'value')
        values = pipe.execute()
    status = {k: v for k,v in zip(values[::2], values[1::2])}

    pad = float(status['D_IMRPAD'])
    oap4th = float(status['X_OAP4TH'])
    oap4ph = float(status['X_OAP4PH'])
    strth = float(status['X_STRTHE'])
    strph = float(status['X_STRPHI'])

    return(pad,oap4th,oap4ph,strth,strph)

hmsg = """
-------- IRCam target tracking ---------

Usage: ircam_track <separation> <PA>

INPUT <separation> : Separation between star and target (in arcsec)
INPUT <PA>         : Position angle in degrees (0deg: North, 90deg: East)
EXAMPLE :  ircam_track 0.2 135 

for any questions, ask Julien Lozi (lozi@naoj.org).
"""

args = sys.argv[1:]

if len(args) < 2:
    print(hmsg)
else:
    try:
        dist = float(args[0])
        angle = float(args[1])
    except:
        print(hmsg)
    if len(args) >= 3:
        print(hmsg)

# ------------------------------------------------------------------
#             files and shared memory
# ------------------------------------------------------------------

pad,oap4th,oap4ph,strth,strph = RDB_pull(rdb)

oap_file = "/home/scexao/bin/devices/conf/conf_oap4.txt"
with open(oap_file,'r') as f:
    f2 = [float(s) for s in f.readlines()[0].split(';')[2:4]]
f.close()
oap0 = f2

steering_file = "/home/scexao/bin/devices/conf/conf_steering.txt"
with open(steering_file,'r') as f:
    f2 = [float(s) for s in f.readlines()[0].split(';')[2:4]]
f.close()
steering0 = f2

if oap0[0] == [] or oap0[1] == [] or steering0 == []:
    sys.exit()

print(oap0, steering0)

pad0 = 0
try:
    while True:
        pad,oap4th,oap4ph,strth,strph = RDB_pull(rdb)
        if pad0 == pad:
            time.sleep(1)
        else:
            print(pad)
            pad0 = pad
            posx = -dist*m.cos((-angle+pad+180)/180.*m.pi)
            posy = dist*m.sin((-angle+pad+180)/180.*m.pi)
            
            sttheta = posx*slopesteeringtheta
            stphi = posy*slopesteeringphi
            oaptheta = posx*slopeoap4theta+posx**2*quadoap4theta
            oapphi = posy*slopeoap4phi
            
            oaptheta += oap0[0]
            oapphi += oap0[1]
            sttheta += steering0[0]
            stphi += steering0[1]
            
            print("Moving to (%.1f, %.1f) arcsec" % (posx,posy))
            print("Moving steering mirror to (%.3f, %.3f) degree" % (sttheta,stphi))
            print("Moving OAP4 to (%.3f, %.3f) degree" % (oaptheta,oapphi))
            
            os.system("~/bin/devices/oap4 theta goto %.3f" % (oaptheta,))
            os.system("~/bin/devices/steering theta goto %.3f" % (sttheta,))
            os.system("~/bin/devices/oap4 phi goto %.3f" % (oapphi,))
            os.system("~/bin/devices/steering phi goto %.3f" % (stphi,))
            subprocess.call(['/home/scexao/bin/scexaostatus', 'set', 'oap4_st', '%.1f as, %d deg' % (dist,angle), '2'])
            subprocess.call(['/home/scexao/bin/scexaostatus', 'set', 'steering_st', '%.1f as, %d deg' % (dist, angle), '2'])
            time.sleep(10)
            
            
            
except KeyboardInterrupt:
    sys.exit()
    
