#!/usr/bin/python
'''
NPS control - Use "nps help" for full info

Usage:
    nps help
    nps <dev> status
    nps <dev> <port> (status|on|off)

Options:
    <dev>     NPS device number (1-3)
    <port>    NPS port (1-8 for NPS 1 & 3, 1-16 for NPS 2)
'''

import os
import sys
import time

home = os.getenv('HOME')
sys.path.append(home + '/src/lib/python/')
from nps import NPS, NewNPS

# SPECIFIC PARAMETERS FOR THIS DEVICE


def message(nps_id=0):
    if nps_id == 1:
        print("------------------------------------")
        print("          NPS1 contents             ")
        print("------------------------------------")
        print("Port 1: SCExAO comp 4 redundant")
        print("Port 2: SCExAO comp 2 primary")
        print("Port 3: High voltage tip/tilt driver")
        print("Port 4: VAMPIRES camera")
        print("Port 5: Source box")
        print("Port 6: DM electronics")
        print("Port 7: VAMPIRES synchro & FLC")
        print("Port 8: VAMPIRES differential wheel")
        print("------------------------------------")
    elif nps_id == 2:
        print("------------------------------------")
        print("          NPS2 contents             ")
        print("------------------------------------")
        print("Port  1: SCExAO comp 4 primary")
        print("Port  2: SCExAO comp 2 redundant")
        print("Port  3: KIWIKIU power")
        print("Port  4: OCAM power")
        print("Port  5: Tip/Tilt modulator")
        print("Port  6: FIRST Neon cal source")
        print("Port  7: DM Vacuum Pump")
        print("Port  8: --")
        print("Port  9: SCExAO comp 4 primary")
        print("Port 10: SCExAO comp 2 redundant")
        print("Port 11: KIWIKIU power")
        print("Port 12: OCAM power")
        print("Port 13: Tip/Tilt modulator")
        print("Port 14: FIRST Neon cal source")
        print("Port 15: DM Vacuum Pump")
        print("Port 16: --")
        print("------------------------------------")
    elif nps_id == 3:
        print("------------------------------------")
        print("          NPS3 contents             ")
        print("------------------------------------")
        print("Port 1: --")
        print("Port 2: VAMPIRES computer")
        print("Port 3: APAPANE power")
        print("Port 4: 15V power supplies (Zaber)")
        print("Port 5: 5 and 12V supplies (Wheels)")
        print("Port 6: 24V power supplies (Ez step)")
        print("Port 7: GLINT picomotors")
        print("Port 8: PALILA power")
        print("------------------------------------")
    else:
        print("------------------------------------")
        print("There are only 3 NPSs!")
        print("------------------------------------")

    print("Usage: nps <dev> <port> <command>")
    print("------------------------------------")
    print("DEV:")
    print("    1-3     NPS #1 to #3")
    print("PORT:")
    print("    status  status of the full device")
    print("    1-8     select port #N")
    print("COMMAND:")
    print("    status  status of port #N")
    print("    on      turn on port #N")
    print("    off     turn off port #N")
    print("------------------------------------")
    exit()


# -----------------------------------------------------------------
def quickhelp(name, description):
    print("%20s       %s" % (name, description))
    exit()


# -----------------------------------------------------------------
# -----------------------------------------------------------------

name = "nps"
description = "Turn on/off/status port on a power switch"

if __name__ == "__main__":
    import docopt

    args = docopt.docopt(__doc__)

    if args["help"]:
        quickhelp(name, description)
        print()
        message()

    # Sanitize dev
    NPS_CLASS = {1: NPS, 2: NewNPS, 3: NPS, 4: NewNPS}
    PORT_MAX = {1: 8, 2: 16, 3: 8, 4: 8}

    try:
        nps_id = int(args["<dev>"])
        if not nps_id in [1,2,3,4]:
            raise ValueError
        Nps_class = NPS_CLASS[nps_id]
    except ValueError:
        message()
        sys.exit(1)

    # Fetch status for full NPS
    if args["status"] and args["<port>"] is None:
        for port_id in range(1, PORT_MAX[nps_id]+1):
            nps_name = "nps %d port %d" % (nps_id, port_id)
            Nps_class(nps_name, nps_id, port_id, args=["status"], description=description)
        sys.exit(0)

    # Sanitize port
    try:
        port_id = int(args["<port>"])
        if not port_id in range(1, PORT_MAX[nps_id]+1):
            raise ValueError
    except ValueError:
        message()
        sys.exit(1)

    # On / off / status for a single port
    nps_name = "nps %d port %d" % (nps_id, port_id)
    if args["on"]:
        command = "on"
    elif args["off"]:
        command = "off"
    else:
        command = "status"

    Nps_class(nps_name, nps_id, port_id, args=[command], description=description)

    sys.exit(0)
